import java_cup.runtime.*;

action code {: SymbolTable currentEnv, env; :};

terminal String ID;
terminal String INTEGER;
terminal LT, LE, GT, GE, EQ, NE;
terminal PLUS, MINUS;
terminal TIMES, SLASH;
terminal SEMICOLON, PERIOD, COMMA, LPAREN, RPAREN, ASSIGN;
terminal BEGIN, CALL, CONST, DO, END, IF, ODD, PROC, THEN, VAR, WHILE;

non terminal SymbolTable program;
non terminal SymbolTable block;
non terminal constDecl;
non terminal constAssignmentList;
non terminal varDecl;
non terminal identList;
non terminal procDecl;
non terminal statement;
non terminal statementList;
non terminal condition;
non terminal expression;
non terminal relation;
non terminal term;
non terminal addingOperator;
non terminal factor;
non terminal multiplyingOperator;
non terminal id;

start with program;

program ::= block:blockEnv PERIOD {: RESULT = blockEnv; :} ;

block ::= 
     {: 
       currentEnv = env;         /* save current env */
       env = new SymbolTable (); /* start new scope */
     :} 
     constDecl varDecl procDecl statement
     {: RESULT = env; env = currentEnv; /* restore env */ :} ;

constDecl ::= CONST constAssignmentList SEMICOLON | ;

constAssignmentList ::= 
      ID:id EQ INTEGER:integer 
        {: env . enterConst (id, Integer . parseInt (integer)); :}
    | constAssignmentList COMMA ID:id EQ INTEGER:integer
        {: env . enterConst (id, Integer . parseInt (integer)); :}
      ;

varDecl ::= VAR identList SEMICOLON | ;

identList ::= ID:id {: env . enterVar (id); :}
    | identList COMMA ID:id {: env . enterVar (id); :} ;

procDecl ::= procDecl PROC ID:id SEMICOLON block:blockEnv SEMICOLON 
      {: env . enterProc (id, blockEnv, ""); /* code is null at present */ :}
    | ;

statement ::= ID ASSIGN expression 
    | CALL ID
    | BEGIN statementList END 
    | IF condition THEN statement
    | WHILE condition DO statement
    | ;

statementList ::= statement 
    | statementList SEMICOLON statement ;

condition ::= ODD expression 
    | expression relation expression ;

relation ::= EQ | NE | LT | GT | LE | GE ;

expression ::= term | addingOperator term
    | expression addingOperator term ;

addingOperator ::= PLUS | MINUS ;

term ::= factor | term multiplyingOperator factor ;

multiplyingOperator ::= TIMES | SLASH ;

factor ::= ID | INTEGER | LPAREN expression RPAREN ;
