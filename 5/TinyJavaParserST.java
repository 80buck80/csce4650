
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Apr 15 13:42:09 CDT 2018
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Apr 15 13:42:09 CDT 2018
  */
public class TinyJavaParserST extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public TinyJavaParserST() {super();}

  /** Constructor which sets the default scanner. */
  public TinyJavaParserST(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public TinyJavaParserST(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\150\000\002\002\004\000\002\057\002\000\002\002" +
    "\013\000\002\003\003\000\002\003\004\000\002\060\002" +
    "\000\002\061\002\000\002\004\011\000\002\005\004\000" +
    "\002\005\002\000\002\006\004\000\002\006\003\000\002" +
    "\007\004\000\002\010\003\000\002\010\002\000\002\011" +
    "\010\000\002\011\007\000\002\011\007\000\002\011\006" +
    "\000\002\062\002\000\002\012\011\000\002\063\002\000" +
    "\002\012\012\000\002\012\003\000\002\013\004\000\002" +
    "\013\005\000\002\014\004\000\002\064\002\000\002\014" +
    "\006\000\002\015\007\000\002\016\005\000\002\016\002" +
    "\000\002\017\006\000\002\017\005\000\002\020\030\000" +
    "\002\020\014\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\022\003\000\002\022\002\000\002\023" +
    "\005\000\002\023\003\000\002\024\005\000\002\025\005" +
    "\000\002\026\004\000\002\026\003\000\002\027\003\000" +
    "\002\027\004\000\002\027\010\000\002\027\007\000\002" +
    "\027\013\000\002\030\005\000\002\030\010\000\002\030" +
    "\011\000\002\031\005\000\002\031\002\000\002\032\004" +
    "\000\002\032\002\000\002\033\003\000\002\033\002\000" +
    "\002\034\005\000\002\034\003\000\002\035\005\000\002" +
    "\035\003\000\002\036\005\000\002\036\003\000\002\037" +
    "\005\000\002\037\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\046\003\000\002\040\003\000\002\040\005\000\002" +
    "\044\003\000\002\044\003\000\002\041\003\000\002\041" +
    "\005\000\002\045\003\000\002\045\003\000\002\042\003" +
    "\000\002\042\004\000\002\047\003\000\002\047\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\043\005\000\002\050\003\000\002\050" +
    "\003\000\002\051\003\000\002\051\004\000\002\051\006" +
    "\000\002\052\006\000\002\052\002\000\002\053\006\000" +
    "\002\053\010\000\002\054\003\000\002\055\003\000\002" +
    "\056\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\004\043\005\001\002\000\004\002\345\001" +
    "\002\000\004\046\006\001\002\000\004\024\007\001\002" +
    "\000\004\064\010\001\002\000\004\024\011\001\002\000" +
    "\004\021\012\001\002\000\004\023\013\001\002\000\004" +
    "\037\000\001\002\000\004\037\017\001\002\000\006\002" +
    "\uffff\037\017\001\002\000\006\002\ufffe\037\ufffe\001\002" +
    "\000\004\004\020\001\002\000\010\004\uff9c\026\uff9c\032" +
    "\uff9c\001\002\000\004\032\022\001\002\000\016\004\ufffc" +
    "\033\ufffc\036\ufffc\045\ufffc\054\ufffc\057\ufffc\001\002\000" +
    "\016\004\ufff8\033\ufff8\036\ufff8\045\ufff8\054\ufff8\057\ufff8" +
    "\001\002\000\016\004\ufff3\033\ufffb\036\ufff3\045\ufff3\054" +
    "\027\057\030\001\002\000\004\032\uffea\001\002\000\016" +
    "\004\ufff6\033\ufff6\036\ufff6\045\ufff6\054\ufff6\057\ufff6\001" +
    "\002\000\012\004\020\036\041\045\042\057\307\001\002" +
    "\000\012\004\ufff4\036\ufff4\045\ufff4\056\262\001\002\000" +
    "\004\033\261\001\002\000\004\032\065\001\002\000\004" +
    "\023\064\001\002\000\016\004\ufff9\033\ufff9\036\ufff9\045" +
    "\ufff9\054\ufff9\057\ufff9\001\002\000\010\004\020\036\041" +
    "\045\042\001\002\000\004\004\043\001\002\000\004\004" +
    "\uffdd\001\002\000\004\023\ufff5\001\002\000\004\004\uffdb" +
    "\001\002\000\004\004\uffdc\001\002\000\014\023\uff9b\025" +
    "\uff9b\027\uff9b\030\uff9b\034\uff9b\001\002\000\010\023\uffe7" +
    "\030\uffe6\034\uffe6\001\002\000\006\030\uffe2\034\uffe2\001" +
    "\002\000\006\030\050\034\051\001\002\000\004\023\uffe5" +
    "\001\002\000\004\031\063\001\002\000\004\051\052\001" +
    "\002\000\004\045\053\001\002\000\004\030\054\001\002" +
    "\000\004\005\061\001\002\000\006\023\uffe4\030\056\001" +
    "\002\000\004\005\057\001\002\000\004\031\060\001\002" +
    "\000\006\023\uffe1\030\uffe1\001\002\000\004\031\062\001" +
    "\002\000\006\023\uffe0\030\uffe0\001\002\000\012\025\uffe3" +
    "\027\uffe3\030\uffe3\034\uffe3\001\002\000\016\004\ufff7\033" +
    "\ufff7\036\ufff7\045\ufff7\054\ufff7\057\ufff7\001\002\000\026" +
    "\004\101\032\077\033\uffc9\036\041\042\076\045\042\055" +
    "\075\061\104\062\102\066\072\001\002\000\050\006\uff9f" +
    "\007\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016" +
    "\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f" +
    "\025\uff9f\027\uff9f\030\uff9f\031\uff9f\034\uff9f\001\002\000" +
    "\024\004\uffd2\032\uffd2\033\uffd2\040\uffd2\042\uffd2\055\uffd2" +
    "\061\uffd2\062\uffd2\066\uffd2\001\002\000\022\004\uffd3\032" +
    "\uffd3\033\uffd3\042\uffd3\055\uffd3\061\uffd3\062\uffd3\066\uffd3" +
    "\001\002\000\004\023\257\001\002\000\004\026\253\001" +
    "\002\000\004\026\250\001\002\000\026\004\101\032\077" +
    "\033\uffc9\036\041\042\076\045\042\055\075\061\104\062" +
    "\102\066\072\001\002\000\024\004\113\005\137\010\121" +
    "\017\117\020\134\026\124\041\133\062\102\063\122\001" +
    "\002\000\004\026\230\001\002\000\016\004\113\032\077" +
    "\042\076\061\104\062\102\066\072\001\002\000\004\023" +
    "\225\001\002\000\014\004\uff9c\024\uff9b\026\uff9a\030\uff9b" +
    "\034\uff9b\001\002\000\046\006\uffa3\007\uffa3\011\uffa3\012" +
    "\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3" +
    "\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\027\uffa3\031" +
    "\uffa3\034\uffa3\001\002\000\022\004\113\032\077\033\uffc9" +
    "\042\076\055\075\061\104\062\102\066\072\001\002\000" +
    "\004\024\212\001\002\000\006\024\uffa5\034\177\001\002" +
    "\000\044\006\uffa4\007\uffa4\011\uffa4\012\uffa4\013\uffa4\014" +
    "\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4" +
    "\023\uffa4\024\uffa4\025\uffa4\027\uffa4\031\uffa4\001\002\000" +
    "\004\033\176\001\002\000\004\024\111\001\002\000\004" +
    "\004\113\001\002\000\050\006\uff9f\007\uff9f\011\uff9f\012" +
    "\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f" +
    "\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\027\uff9f\030" +
    "\uff9f\031\uff9f\034\uff9f\001\002\000\052\006\uff9b\007\uff9b" +
    "\011\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\017" +
    "\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b" +
    "\026\uff9a\027\uff9b\030\uff9b\031\uff9b\034\uff9b\001\002\000" +
    "\004\026\115\001\002\000\026\004\113\005\137\010\121" +
    "\017\117\020\134\026\124\027\uffc5\041\133\062\102\063" +
    "\122\001\002\000\004\027\171\001\002\000\024\004\uffb4" +
    "\005\uffb4\010\uffb4\017\uffb4\020\uffb4\026\uffb4\041\uffb4\062" +
    "\uffb4\063\uffb4\001\002\000\042\006\uffae\007\uffae\011\uffae" +
    "\012\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020" +
    "\uffae\021\uffae\022\uffae\023\uffae\025\uffae\027\uffae\031\uffae" +
    "\001\002\000\024\004\uffab\005\uffab\010\uffab\017\uffab\020" +
    "\uffab\026\uffab\041\uffab\062\uffab\063\uffab\001\002\000\042" +
    "\006\uffa8\007\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015" +
    "\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8" +
    "\025\uffa8\027\uffa8\031\uffa8\001\002\000\016\006\163\007" +
    "\uffc1\023\uffc1\025\uffc1\027\uffc1\031\uffc1\001\002\000\024" +
    "\004\113\005\137\010\121\017\117\020\134\026\124\041" +
    "\133\062\102\063\122\001\002\000\006\025\165\027\uffc6" +
    "\001\002\000\016\006\uffbf\007\uffbf\023\uffbf\025\uffbf\027" +
    "\uffbf\031\uffbf\001\002\000\010\007\161\025\uffc3\027\uffc3" +
    "\001\002\000\042\006\uffb2\007\uffb2\011\uffb2\012\uffb2\013" +
    "\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2" +
    "\022\uffb2\023\uffb2\025\uffb2\027\uffb2\031\uffb2\001\002\000" +
    "\024\004\113\005\137\010\121\017\117\020\134\026\124" +
    "\041\133\062\102\063\122\001\002\000\042\006\uffb6\007" +
    "\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6" +
    "\017\uffb6\020\uffb6\021\155\022\154\023\uffb6\025\uffb6\027" +
    "\uffb6\031\uffb6\001\002\000\042\006\uffa7\007\uffa7\011\uffa7" +
    "\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020" +
    "\uffa7\021\uffa7\022\uffa7\023\uffa7\025\uffa7\027\uffa7\031\uffa7" +
    "\001\002\000\024\004\uffb3\005\uffb3\010\uffb3\017\uffb3\020" +
    "\uffb3\026\uffb3\041\uffb3\062\uffb3\063\uffb3\001\002\000\044" +
    "\006\uffa5\007\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015" +
    "\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5" +
    "\024\uffa5\025\uffa5\027\uffa5\031\uffa5\001\002\000\024\004" +
    "\uffac\005\uffac\010\uffac\017\uffac\020\uffac\026\uffac\041\uffac" +
    "\062\uffac\063\uffac\001\002\000\042\006\uffa9\007\uffa9\011" +
    "\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9" +
    "\020\uffa9\021\uffa9\022\uffa9\023\uffa9\025\uffa9\027\uffa9\031" +
    "\uffa9\001\002\000\044\006\uffaa\007\uffaa\011\uffaa\012\uffaa" +
    "\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021" +
    "\uffaa\022\uffaa\023\uffaa\024\111\025\uffaa\027\uffaa\031\uffaa" +
    "\001\002\000\036\006\uffbd\007\uffbd\011\150\012\144\013" +
    "\145\014\142\015\143\016\147\017\117\020\134\023\uffbd" +
    "\025\uffbd\027\uffbd\031\uffbd\001\002\000\024\004\uffb9\005" +
    "\uffb9\010\uffb9\017\uffb9\020\uffb9\026\uffb9\041\uffb9\062\uffb9" +
    "\063\uffb9\001\002\000\024\004\uffb8\005\uffb8\010\uffb8\017" +
    "\uffb8\020\uffb8\026\uffb8\041\uffb8\062\uffb8\063\uffb8\001\002" +
    "\000\024\004\uffbb\005\uffbb\010\uffbb\017\uffbb\020\uffbb\026" +
    "\uffbb\041\uffbb\062\uffbb\063\uffbb\001\002\000\024\004\uffba" +
    "\005\uffba\010\uffba\017\uffba\020\uffba\026\uffba\041\uffba\062" +
    "\uffba\063\uffba\001\002\000\024\004\113\005\137\010\121" +
    "\017\117\020\134\026\124\041\133\062\102\063\122\001" +
    "\002\000\024\004\uffb7\005\uffb7\010\uffb7\017\uffb7\020\uffb7" +
    "\026\uffb7\041\uffb7\062\uffb7\063\uffb7\001\002\000\024\004" +
    "\uffbc\005\uffbc\010\uffbc\017\uffbc\020\uffbc\026\uffbc\041\uffbc" +
    "\062\uffbc\063\uffbc\001\002\000\024\004\113\005\137\010" +
    "\121\017\117\020\134\026\124\041\133\062\102\063\122" +
    "\001\002\000\042\006\uffb5\007\uffb5\011\uffb5\012\uffb5\013" +
    "\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\155" +
    "\022\154\023\uffb5\025\uffb5\027\uffb5\031\uffb5\001\002\000" +
    "\024\004\113\005\137\010\121\017\117\020\134\026\124" +
    "\041\133\062\102\063\122\001\002\000\024\004\uffaf\005" +
    "\uffaf\010\uffaf\017\uffaf\020\uffaf\026\uffaf\041\uffaf\062\uffaf" +
    "\063\uffaf\001\002\000\024\004\uffb0\005\uffb0\010\uffb0\017" +
    "\uffb0\020\uffb0\026\uffb0\041\uffb0\062\uffb0\063\uffb0\001\002" +
    "\000\042\006\uffb1\007\uffb1\011\uffb1\012\uffb1\013\uffb1\014" +
    "\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1" +
    "\023\uffb1\025\uffb1\027\uffb1\031\uffb1\001\002\000\022\006" +
    "\uffbe\007\uffbe\017\117\020\134\023\uffbe\025\uffbe\027\uffbe" +
    "\031\uffbe\001\002\000\042\006\uffad\007\uffad\011\uffad\012" +
    "\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020\uffad" +
    "\021\uffad\022\uffad\023\uffad\025\uffad\027\uffad\031\uffad\001" +
    "\002\000\024\004\113\005\137\010\121\017\117\020\134" +
    "\026\124\041\133\062\102\063\122\001\002\000\016\006" +
    "\163\007\uffc2\023\uffc2\025\uffc2\027\uffc2\031\uffc2\001\002" +
    "\000\024\004\113\005\137\010\121\017\117\020\134\026" +
    "\124\041\133\062\102\063\122\001\002\000\016\006\uffc0" +
    "\007\uffc0\023\uffc0\025\uffc0\027\uffc0\031\uffc0\001\002\000" +
    "\024\004\113\005\137\010\121\017\117\020\134\026\124" +
    "\041\133\062\102\063\122\001\002\000\010\007\161\025" +
    "\uffc4\027\uffc4\001\002\000\006\007\161\027\170\001\002" +
    "\000\042\006\uffa6\007\uffa6\011\uffa6\012\uffa6\013\uffa6\014" +
    "\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6" +
    "\023\uffa6\025\uffa6\027\uffa6\031\uffa6\001\002\000\044\006" +
    "\uff9d\007\uff9d\011\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d" +
    "\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024" +
    "\uff9d\025\uff9d\027\uff9d\031\uff9d\001\002\000\050\006\uffa1" +
    "\007\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016" +
    "\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1" +
    "\025\uffa1\027\uffa1\030\173\031\uffa1\034\uffa1\001\002\000" +
    "\024\004\113\005\137\010\121\017\117\020\134\026\124" +
    "\041\133\062\102\063\122\001\002\000\006\007\161\031" +
    "\175\001\002\000\050\006\uffa0\007\uffa0\011\uffa0\012\uffa0" +
    "\013\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021" +
    "\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0\027\uffa0\030\uffa0" +
    "\031\uffa0\034\uffa0\001\002\000\016\004\uffef\033\uffef\036" +
    "\uffef\045\uffef\054\uffef\057\uffef\001\002\000\030\004\113" +
    "\005\137\010\121\017\117\020\134\026\124\041\133\044" +
    "\200\051\202\062\102\063\122\001\002\000\004\024\206" +
    "\001\002\000\006\007\161\023\uffcd\001\002\000\004\004" +
    "\020\001\002\000\004\026\204\001\002\000\004\027\205" +
    "\001\002\000\004\023\uffcc\001\002\000\004\050\207\001" +
    "\002\000\004\026\210\001\002\000\004\027\211\001\002" +
    "\000\004\023\uffcb\001\002\000\004\052\213\001\002\000" +
    "\004\024\214\001\002\000\004\053\215\001\002\000\004" +
    "\026\216\001\002\000\024\004\113\005\137\010\121\017" +
    "\117\020\134\026\124\041\133\062\102\063\122\001\002" +
    "\000\006\007\161\027\220\001\002\000\004\023\221\001" +
    "\002\000\024\004\uffce\032\uffce\033\uffce\040\uffce\042\uffce" +
    "\055\uffce\061\uffce\062\uffce\066\uffce\001\002\000\022\004" +
    "\uffd4\032\uffd4\033\uffd4\042\uffd4\055\uffd4\061\uffd4\062\uffd4" +
    "\066\uffd4\001\002\000\004\033\224\001\002\000\016\004" +
    "\ufff1\033\ufff1\036\ufff1\045\ufff1\054\ufff1\057\ufff1\001\002" +
    "\000\026\004\uffe9\032\uffe9\033\uffe9\036\uffe9\042\uffe9\045" +
    "\uffe9\055\uffe9\061\uffe9\062\uffe9\066\uffe9\001\002\000\020" +
    "\004\113\032\077\033\227\042\076\061\104\062\102\066" +
    "\072\001\002\000\024\004\uffd5\032\uffd5\033\uffd5\040\uffd5" +
    "\042\uffd5\055\uffd5\061\uffd5\062\uffd5\066\uffd5\001\002\000" +
    "\024\004\113\005\137\010\121\017\117\020\134\026\124" +
    "\041\133\062\102\063\122\001\002\000\006\007\161\027" +
    "\232\001\002\000\016\004\113\032\077\042\076\061\104" +
    "\062\102\066\072\001\002\000\024\004\uffc7\032\uffc7\033" +
    "\uffc7\040\235\042\uffc7\055\uffc7\061\uffc7\062\uffc7\066\uffc7" +
    "\001\002\000\024\004\uffd0\032\uffd0\033\uffd0\040\uffd0\042" +
    "\uffd0\055\uffd0\061\uffd0\062\uffd0\066\uffd0\001\002\000\016" +
    "\004\113\032\077\042\076\061\104\062\102\066\072\001" +
    "\002\000\024\004\uffc8\032\uffc8\033\uffc8\040\uffc8\042\uffc8" +
    "\055\uffc8\061\uffc8\062\uffc8\066\uffc8\001\002\000\006\007" +
    "\161\023\240\001\002\000\004\033\uffca\001\002\000\004" +
    "\023\247\001\002\000\022\004\113\032\077\033\uffc9\042" +
    "\076\055\075\061\104\062\102\066\072\001\002\000\004" +
    "\033\244\001\002\000\016\004\ufff0\033\ufff0\036\ufff0\045" +
    "\ufff0\054\ufff0\057\ufff0\001\002\000\004\033\246\001\002" +
    "\000\016\004\ufff2\033\ufff2\036\ufff2\045\ufff2\054\ufff2\057" +
    "\ufff2\001\002\000\026\004\uffe8\032\uffe8\033\uffe8\036\uffe8" +
    "\042\uffe8\045\uffe8\055\uffe8\061\uffe8\062\uffe8\066\uffe8\001" +
    "\002\000\026\004\113\005\137\010\121\017\117\020\134" +
    "\026\124\027\uffc5\041\133\062\102\063\122\001\002\000" +
    "\004\027\252\001\002\000\044\006\uff9e\007\uff9e\011\uff9e" +
    "\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e\020" +
    "\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e\027\uff9e" +
    "\031\uff9e\001\002\000\024\004\113\005\137\010\121\017" +
    "\117\020\134\026\124\041\133\062\102\063\122\001\002" +
    "\000\006\007\161\027\255\001\002\000\016\004\113\032" +
    "\077\042\076\061\104\062\102\066\072\001\002\000\024" +
    "\004\uffcf\032\uffcf\033\uffcf\040\uffcf\042\uffcf\055\uffcf\061" +
    "\uffcf\062\uffcf\066\uffcf\001\002\000\024\004\uffd1\032\uffd1" +
    "\033\uffd1\040\uffd1\042\uffd1\055\uffd1\061\uffd1\062\uffd1\066" +
    "\uffd1\001\002\000\050\006\uffa2\007\uffa2\011\uffa2\012\uffa2" +
    "\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021" +
    "\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\027\uffa2\030\173" +
    "\031\uffa2\034\uffa2\001\002\000\006\002\ufffa\037\ufffa\001" +
    "\002\000\004\044\263\001\002\000\004\034\264\001\002" +
    "\000\004\051\265\001\002\000\004\056\266\001\002\000" +
    "\004\026\267\001\002\000\004\061\270\001\002\000\004" +
    "\024\271\001\002\000\004\044\272\001\002\000\004\027" +
    "\273\001\002\000\004\023\274\001\002\000\004\054\275" +
    "\001\002\000\004\057\276\001\002\000\004\065\277\001" +
    "\002\000\004\047\300\001\002\000\004\026\301\001\002" +
    "\000\004\060\302\001\002\000\004\035\303\001\002\000" +
    "\004\030\304\001\002\000\004\031\305\001\002\000\004" +
    "\027\306\001\002\000\004\032\uffdf\001\002\000\012\004" +
    "\020\036\041\045\042\065\327\001\002\000\004\004\311" +
    "\001\002\000\004\026\uff9a\001\002\000\004\026\313\001" +
    "\002\000\012\004\uffee\027\uffee\036\uffee\045\uffee\001\002" +
    "\000\012\004\020\027\uffd9\036\041\045\042\001\002\000" +
    "\004\027\325\001\002\000\004\004\043\001\002\000\006" +
    "\025\321\027\uffda\001\002\000\006\025\uffd7\027\uffd7\001" +
    "\002\000\010\004\020\036\041\045\042\001\002\000\006" +
    "\025\uffd8\027\uffd8\001\002\000\010\025\uffe2\027\uffe2\030" +
    "\uffe2\001\002\000\010\025\uffd6\027\uffd6\030\050\001\002" +
    "\000\004\032\uffed\001\002\000\004\004\311\001\002\000" +
    "\004\047\330\001\002\000\004\026\331\001\002\000\004" +
    "\060\332\001\002\000\004\035\333\001\002\000\004\030" +
    "\334\001\002\000\004\031\335\001\002\000\004\027\336" +
    "\001\002\000\004\032\uffde\001\002\000\004\026\340\001" +
    "\002\000\012\004\uffec\027\uffec\036\uffec\045\uffec\001\002" +
    "\000\012\004\020\027\uffd9\036\041\045\042\001\002\000" +
    "\004\027\343\001\002\000\004\032\uffeb\001\002\000\006" +
    "\002\ufffd\037\ufffd\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\057" +
    "\013\001\001\000\006\003\014\004\015\001\001\000\004" +
    "\004\343\001\001\000\002\001\001\000\004\054\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\060\022" +
    "\001\001\000\004\005\023\001\001\000\020\006\033\007" +
    "\032\010\034\011\025\012\031\020\024\061\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\021\307\054" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\014" +
    "\037\021\035\054\036\001\001\000\004\055\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\064\044\001\001" +
    "\000\006\015\046\016\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\013\073\014\077\021\035" +
    "\025\066\026\102\027\067\030\070\031\106\050\107\051" +
    "\104\053\105\054\036\055\065\056\072\001\001\000\004" +
    "\052\257\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\014\240\021\035\025\066\026\241\027\067\030\070\031" +
    "\242\050\107\051\104\053\105\054\036\055\065\056\072" +
    "\001\001\000\036\035\236\036\122\037\125\040\140\041" +
    "\131\042\127\043\117\044\135\047\130\050\137\051\134" +
    "\053\105\055\065\056\072\001\001\000\002\001\001\000" +
    "\024\025\066\026\225\027\067\030\070\050\107\051\104" +
    "\053\105\055\065\056\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\025\066\027\221" +
    "\030\070\031\222\050\107\051\104\053\105\055\065\056" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\055" +
    "\111\056\113\001\001\000\004\052\171\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\033\115\034\124\035" +
    "\126\036\122\037\125\040\140\041\131\042\127\043\117" +
    "\044\135\047\130\050\137\051\134\053\105\055\065\056" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\035\166\036\122\037\125\040\140\041\131" +
    "\042\127\043\117\044\135\047\130\050\137\051\134\053" +
    "\105\055\065\056\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\042" +
    "\157\043\117\044\135\047\130\050\137\051\134\053\105" +
    "\055\065\056\072\001\001\000\004\045\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\044" +
    "\150\046\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\040\156\041" +
    "\131\042\127\043\117\044\135\047\130\050\137\051\134" +
    "\053\105\055\065\056\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\041\151\042\127\043\117\044\135" +
    "\047\130\050\137\051\134\053\105\055\065\056\072\001" +
    "\001\000\004\045\152\001\001\000\024\042\155\043\117" +
    "\044\135\047\130\050\137\051\134\053\105\055\065\056" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\150\001\001\000\002\001\001\000" +
    "\034\036\161\037\125\040\140\041\131\042\127\043\117" +
    "\044\135\047\130\050\137\051\134\053\105\055\065\056" +
    "\072\001\001\000\002\001\001\000\032\037\163\040\140" +
    "\041\131\042\127\043\117\044\135\047\130\050\137\051" +
    "\134\053\105\055\065\056\072\001\001\000\002\001\001" +
    "\000\036\035\165\036\122\037\125\040\140\041\131\042" +
    "\127\043\117\044\135\047\130\050\137\051\134\053\105" +
    "\055\065\056\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\035\173\036\122\037\125\040\140\041\131\042" +
    "\127\043\117\044\135\047\130\050\137\051\134\053\105" +
    "\055\065\056\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\035\200\036\122\037\125" +
    "\040\140\041\131\042\127\043\117\044\135\047\130\050" +
    "\137\051\134\053\105\055\065\056\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\054\202\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\035\216\036\122\037\125\040" +
    "\140\041\131\042\127\043\117\044\135\047\130\050\137" +
    "\051\134\053\105\055\065\056\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\025\066\027\221\030\070\050\107\051\104\053\105" +
    "\055\065\056\072\001\001\000\002\001\001\000\036\035" +
    "\230\036\122\037\125\040\140\041\131\042\127\043\117" +
    "\044\135\047\130\050\137\051\134\053\105\055\065\056" +
    "\072\001\001\000\002\001\001\000\022\025\066\027\232" +
    "\030\070\050\107\051\104\053\105\055\065\056\072\001" +
    "\001\000\004\032\233\001\001\000\002\001\001\000\022" +
    "\025\066\027\235\030\070\050\107\051\104\053\105\055" +
    "\065\056\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\025\066\027" +
    "\221\030\070\031\244\050\107\051\104\053\105\055\065" +
    "\056\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\033\250\034\124\035\126\036\122\037\125\040\140\041" +
    "\131\042\127\043\117\044\135\047\130\050\137\051\134" +
    "\053\105\055\065\056\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\035\253\036\122\037\125\040\140" +
    "\041\131\042\127\043\117\044\135\047\130\050\137\051" +
    "\134\053\105\055\065\056\072\001\001\000\002\001\001" +
    "\000\022\025\066\027\255\030\070\050\107\051\104\053" +
    "\105\055\065\056\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\325\054\036\001\001\000\004" +
    "\056\311\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\062\313\001\001\000\014\021\315\022\314\023\316" +
    "\024\317\054\036\001\001\000\002\001\001\000\004\055" +
    "\322\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\021\315\024\321\054\036\001\001\000\002\001\001\000" +
    "\004\016\323\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\056\336\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\063\340\001\001\000\014\021\315" +
    "\022\341\023\316\024\317\054\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$TinyJavaParserST$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$TinyJavaParserST$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$TinyJavaParserST$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$TinyJavaParserST$actions {

 SymbolTable currentEnv, env, other; 
  private final TinyJavaParserST parser;

  /** Constructor */
  CUP$TinyJavaParserST$actions(TinyJavaParserST parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$TinyJavaParserST$do_action(
    int                        CUP$TinyJavaParserST$act_num,
    java_cup.runtime.lr_parser CUP$TinyJavaParserST$parser,
    java.util.Stack            CUP$TinyJavaParserST$stack,
    int                        CUP$TinyJavaParserST$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$TinyJavaParserST$result;

      /* select the action based on the action number */
      switch (CUP$TinyJavaParserST$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // functionId ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.peek()).value;
		 RESULT = id; 
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("functionId",44, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // objectId ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.peek()).value;
		 RESULT = id; 
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("objectId",43, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // classId ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.peek()).value;
		 RESULT = id; 
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("classId",42, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // functionCall ::= object DOT functionId LPAREN expressionListOption RPAREN 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("functionCall",41, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-5)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // functionCall ::= functionId LPAREN expressionListOption RPAREN 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("functionCall",41, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-3)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // subscriptList ::= 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("subscriptList",40, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // subscriptList ::= subscriptList LBRACK expression RBRACK 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("subscriptList",40, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-3)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // variable ::= object DOT objectId subscriptList 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("variable",39, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-3)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // variable ::= objectId subscriptList 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("variable",39, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // variable ::= THIS 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("variable",39, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // object ::= functionCall 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("object",38, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // object ::= variable 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("object",38, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // primaryExpression ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("primaryExpression",33, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // primaryExpression ::= FALSE 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("primaryExpression",33, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // primaryExpression ::= TRUE 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("primaryExpression",33, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // primaryExpression ::= INTEGER 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("primaryExpression",33, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // primaryExpression ::= object 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("primaryExpression",33, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // unaryOperator ::= NOT 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("unaryOperator",37, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // unaryOperator ::= addingOperator 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("unaryOperator",37, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // factor ::= unaryOperator factor 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("factor",32, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // factor ::= primaryExpression 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("factor",32, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // multiplyingOperator ::= SLASH 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("multiplyingOperator",35, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // multiplyingOperator ::= TIMES 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("multiplyingOperator",35, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // term ::= term multiplyingOperator factor 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("term",31, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // term ::= factor 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("term",31, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // addingOperator ::= MINUS 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("addingOperator",34, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // addingOperator ::= PLUS 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("addingOperator",34, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // arithmeticExpression ::= arithmeticExpression addingOperator term 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("arithmeticExpression",30, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // arithmeticExpression ::= term 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("arithmeticExpression",30, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // relationalOperator ::= NE 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("relationalOperator",36, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // relationalOperator ::= EQ 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("relationalOperator",36, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // relationalOperator ::= GE 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("relationalOperator",36, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // relationalOperator ::= GT 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("relationalOperator",36, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // relationalOperator ::= LE 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("relationalOperator",36, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // relationalOperator ::= LT 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("relationalOperator",36, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // relationalExpression ::= arithmeticExpression 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("relationalExpression",29, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // relationalExpression ::= arithmeticExpression relationalOperator arithmeticExpression 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("relationalExpression",29, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // andExpression ::= relationalExpression 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("andExpression",28, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // andExpression ::= andExpression AND relationalExpression 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("andExpression",28, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= andExpression 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= expression OR andExpression 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expressionList ::= expression 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("expressionList",26, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expressionList ::= expressionList COMMA expression 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("expressionList",26, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expressionListOption ::= 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("expressionListOption",25, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expressionListOption ::= expressionList 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("expressionListOption",25, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // elseOption ::= 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("elseOption",24, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // elseOption ::= ELSE statement 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("elseOption",24, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // returnStatementOption ::= 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("returnStatementOption",23, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // returnStatementOption ::= RETURN expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("returnStatementOption",23, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // assignmentStatement ::= variable ASSIGN IN DOT NEXTINT LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("assignmentStatement",22, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-6)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // assignmentStatement ::= variable ASSIGN NEW classId LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("assignmentStatement",22, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-5)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // assignmentStatement ::= variable ASSIGN expression 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("assignmentStatement",22, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement ::= SYSTEM DOT OUT DOT PRINTLN LPAREN expression RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("statement",21, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-8)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement ::= WHILE LPAREN expression RPAREN statement 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("statement",21, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-4)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement ::= IF LPAREN expression RPAREN statement elseOption 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("statement",21, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-5)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= assignmentStatement SEMICOLON 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("statement",21, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= compoundStatement 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("statement",21, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statementList ::= statement 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("statementList",20, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statementList ::= statementList statement 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("statementList",20, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // compoundStatement ::= LBRACE statementList RBRACE 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("compoundStatement",19, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // argumentDeclaration ::= type objectId subscriptDeclarationList 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).value;
		 env.enterVar(t, id); RESULT = t + " " + id; 
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("argumentDeclaration",18, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // argumentDeclarationList ::= argumentDeclaration 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).right;
		Object arg = (Object)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.peek()).value;
		 RESULT = arg; 
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("argumentDeclarationList",17, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // argumentDeclarationList ::= argumentDeclarationList COMMA argumentDeclaration 
            {
              Object RESULT =null;
		int arglleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)).left;
		int arglright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)).right;
		Object argl = (Object)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).right;
		Object arg = (Object)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.peek()).value;
		 RESULT = argl + ", " + arg; 
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("argumentDeclarationList",17, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // argumentDeclarationListOption ::= 
            {
              Object RESULT =null;
		RESULT = ""; 
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("argumentDeclarationListOption",16, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // argumentDeclarationListOption ::= argumentDeclarationList 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).right;
		Object arg = (Object)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.peek()).value;
		 RESULT = arg; 
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("argumentDeclarationListOption",16, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type ::= BOOLEAN 
            {
              Object RESULT =null;
		 RESULT = "boolean"; 
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type ::= INT 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type ::= classId 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.peek()).value;
		 RESULT = id; 
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // mainDeclaration ::= PUBLIC STATIC VOID MAIN LPAREN STRING ARGS LBRACK RBRACK RPAREN 
            {
              Object RESULT =null;
		 other = env; /* temp stores previous environment */
       env = new SymbolTable();
       env.enterVar("String", "args");
       other.enterFunction("void", "main", "String args[]", env, "");
    
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("mainDeclaration",14, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-9)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // mainDeclaration ::= STATIC SCANNER IN ASSIGN NEW SCANNER LPAREN SYSTEM DOT IN RPAREN SEMICOLON PUBLIC STATIC VOID MAIN LPAREN STRING ARGS LBRACK RBRACK RPAREN 
            {
              Object RESULT =null;
		 other = env; /* temp stores previous environment */
       env = new SymbolTable();
       env.enterVar("String", "args");
       other.enterFunction("void", "main", "String args[]", env, "");
    
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("mainDeclaration",14, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-21)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // dimensionList ::= LBRACK INTEGER RBRACK 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("dimensionList",13, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // dimensionList ::= dimensionList LBRACK INTEGER RBRACK 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("dimensionList",13, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-3)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // subscriptDeclarationList ::= 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("subscriptDeclarationList",12, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // subscriptDeclarationList ::= subscriptDeclarationList LBRACK RBRACK 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("subscriptDeclarationList",12, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // arrayDeclaration ::= subscriptDeclarationList ASSIGN NEW INT dimensionList 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("arrayDeclaration",11, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-4)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // variableDeclaration ::= type objectId NT$5 arrayDeclaration 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)).value;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("variableDeclaration",10, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-3)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$5 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.peek()).value;
 env.enterVar(t, id); 
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("NT$5",50, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // variableDeclaration ::= type objectId 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.peek()).value;
		 env.enterVar(t, id); 
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("variableDeclaration",10, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // variableDeclarationList ::= variableDeclarationList variableDeclaration SEMICOLON 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("variableDeclarationList",9, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // variableDeclarationList ::= variableDeclaration SEMICOLON 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("variableDeclarationList",9, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // functionDeclaration ::= mainDeclaration 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("functionDeclaration",8, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // functionDeclaration ::= PUBLIC STATIC type functionId LPAREN NT$4 argumentDeclarationListOption RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-4)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).right;
		Object arg = (Object)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).value;
		 other.enterFunction(t, id, args, env, ""); 
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("functionDeclaration",8, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-7)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$4 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).value;
 other = env; env = new SymbolTable(); 
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("NT$4",49, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // functionDeclaration ::= PUBLIC type functionId LPAREN NT$3 argumentDeclarationListOption RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-4)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).right;
		Object arg = (Object)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).value;
		 other.enterFunction(t, id, args, env, ""); 
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("functionDeclaration",8, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-6)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$3 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).value;
 other = env;  env = new SymbolTable(); 
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("NT$3",48, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // functionDefinition ::= functionDeclaration LBRACE returnStatementOption RBRACE 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("functionDefinition",7, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-3)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // functionDefinition ::= functionDeclaration LBRACE variableDeclarationList returnStatementOption RBRACE 
            {
              Object RESULT =null;
		 env = other; 
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("functionDefinition",7, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-4)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // functionDefinition ::= functionDeclaration LBRACE statementList returnStatementOption RBRACE 
            {
              Object RESULT =null;
		 env = other; 
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("functionDefinition",7, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-4)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // functionDefinition ::= functionDeclaration LBRACE variableDeclarationList statementList returnStatementOption RBRACE 
            {
              Object RESULT =null;
		 env = other; 
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("functionDefinition",7, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-5)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // staticOption ::= 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("staticOption",6, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // staticOption ::= STATIC 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("staticOption",6, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // memberDeclarator ::= staticOption variableDeclaration 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("memberDeclarator",5, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // memberDeclaration ::= functionDefinition 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("memberDeclaration",4, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // memberDeclaration ::= memberDeclarator SEMICOLON 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("memberDeclaration",4, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // memberList ::= 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("memberList",3, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // memberList ::= memberList memberDeclaration 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("memberList",3, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // classDefinition ::= CLASS classId LBRACE NT$1 memberList NT$2 RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-7)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-7)).value;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("classDefinition",2, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-6)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-3)).value;
 currentEnv.enterClass(args);  env = currentEnv; 
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("NT$2",47, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).value;
 currentEnv = env;  env = new SymbolTable(); 
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("NT$1",46, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // classDefinitionList ::= classDefinitionList classDefinition 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("classDefinitionList",1, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // classDefinitionList ::= classDefinition 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("classDefinitionList",1, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= IMPORT JAVA DOT UTIL DOT TIMES SEMICOLON NT$0 classDefinitionList 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).value;
		 RESULT = env; 
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-8)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 env = new SymbolTable(); 
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("NT$0",45, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).value;
		RESULT = start_val;
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$TinyJavaParserST$parser.done_parsing();
          return CUP$TinyJavaParserST$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

