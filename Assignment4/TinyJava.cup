import java_cup.runtime.*;

terminal IMPORT;
terminal JAVA;
terminal CLASS;
terminal STATIC;
terminal RETURN;
terminal PUBLIC;
terminal NEW;
terminal INT;
terminal SCANNER;
terminal IN;
terminal SYSTEM;
terminal VOID;
terminal MAIN;
terminal STRING;
terminal ARGS;
terminal BOOLEAN;
terminal IF;
terminal ELSE;
terminal WHILE;
terminal OUT;
terminal PRINTLN;
terminal NEXTINT;
terminal TRUE;
terminal FALSE;
terminal THIS;
terminal NE, LE, GE, LT, GT;
terminal AND, OR, NOT;
/*terminal COMMENT;*/
terminal EQ;
terminal SEMICOLON;
terminal LCURLBRACKET, RCURLBRACKET, LSQRBRACKET, RSQRBRACKET, LPAREN, RPAREN;
terminal ASSIGN;
terminal PERIOD;
terminal COMMA;
terminal PLUS, MINUS, TIMES, DIVIDE;
terminal ID;
terminal INTEGER;
terminal UTIL;
terminal ASTERISK;



non terminal program;
non terminal class_definition;
non terminal member_list;
non terminal member_declaration;
non terminal member_declarator;
non terminal function_definition;
non terminal function_declaration;
non terminal variable_declaration;
non terminal main_declaration;
non terminal type;
non terminal argument_declaration_list;
non terminal argument_declaration;
non terminal compound_statement;
non terminal statement_list;
non terminal statement;
non terminal assignment_statement;
non terminal expression;
non terminal expressionList;
non terminal expression_list;
non terminal term;
non terminal primary_expression;
non terminal object;
non terminal variable;
non terminal function_call;
non terminal class_definitionList;
non terminal classId;
non terminal variable_declarationList;
non terminal functionId;
non terminal objectId;
non terminal sqBracketList;
non terminal binary_operator;
non terminal unary_operator;

precedence nonassoc LT, LE, GT, GE, EQ, NE;

precedence left AND, OR;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence left EQ;



start with program;

program ::= IMPORT JAVA PERIOD UTIL PERIOD ASTERISK SEMICOLON class_definitionList ;

class_definitionList ::= class_definitionList class_definition | class_definition ;

class_definition ::= CLASS classId LCURLBRACKET member_list RCURLBRACKET ;

member_list ::= member_list member_declaration | member_declaration ;

member_declaration ::= member_declarator SEMICOLON | function_definition ;

member_declarator ::= STATIC variable_declaration | variable_declaration ;

function_definition ::= function_declaration LCURLBRACKET variable_declarationList RCURLBRACKET |
                        function_declaration LCURLBRACKET variable_declarationList statement_list RCURLBRACKET |
                        function_declaration LCURLBRACKET variable_declarationList RETURN expression SEMICOLON RCURLBRACKET |
                        function_declaration LCURLBRACKET variable_declarationList statement_list RETURN expression SEMICOLON RCURLBRACKET ;

variable_declarationList ::= variable_declarationList variable_declaration SEMICOLON | ;

function_declaration ::= PUBLIC type functionId LPAREN RPAREN |
                         PUBLIC STATIC type functionId LPAREN RPAREN |
                         PUBLIC type functionId LPAREN argument_declaration_list RPAREN |
                         PUBLIC STATIC type functionId LPAREN argument_declaration_list RPAREN |
                         main_declaration ;

argument_declaration_list ::= argument_declaration_list COMMA argument_declaration | argument_declaration ;

argument_declaration ::= type objectId sqBracketList ;

variable_declaration ::= type objectId |
                         type objectId sqBracketList ASSIGN NEW INT LSQRBRACKET INTEGER RSQRBRACKET sqBracketList;

sqBracketList ::= sqBracketList LSQRBRACKET RSQRBRACKET |
                  sqBracketList LSQRBRACKET INTEGER RSQRBRACKET | ;

main_declaration ::= PUBLIC STATIC VOID MAIN
                     LPAREN STRING ARGS LSQRBRACKET RSQRBRACKET RPAREN |
                     STATIC SCANNER IN ASSIGN
                     NEW SCANNER
                     LPAREN SYSTEM PERIOD IN RPAREN SEMICOLON
                     PUBLIC STATIC VOID MAIN
                     LPAREN STRING ARGS LSQRBRACKET RSQRBRACKET RPAREN;

type ::= classId | INT | BOOLEAN ;

compound_statement ::= LCURLBRACKET statement_list RCURLBRACKET ;

statement_list ::= statement_list statement | statement ;

statement ::=  compound_statement
               | assignment_statement SEMICOLON
               | IF LPAREN expression RPAREN statement ELSE statement
               /*| IF LPAREN expression RPAREN statement ELSE statement*/
               | WHILE LPAREN expression RPAREN statement
               | SYSTEM PERIOD OUT PERIOD PRINTLN LPAREN expression RPAREN ;

assignment_statement ::= variable ASSIGN expression |
                         variable ASSIGN NEW classId LPAREN RPAREN |
                         variable ASSIGN IN PERIOD NEXTINT LPAREN RPAREN;

expression ::= term | expression binary_operator expression ;

expressionList ::= expressionList LSQRBRACKET expression RSQRBRACKET | ;

binary_operator ::= AND | OR | EQ | PLUS | MINUS | TIMES | DIVIDE | LT | LE | GT | GE | NE ;

expression_list ::= expression_list COMMA expression | expression ;

term ::= primary_expression | unary_operator term;

unary_operator ::= NOT ;

primary_expression ::= object | INTEGER | TRUE | FALSE | LPAREN expression RPAREN ;

object ::= variable | function_call ;

variable ::= THIS |
             objectId expressionList |
             object PERIOD objectId expressionList ;

function_call ::= functionId LPAREN RPAREN |
                  object PERIOD functionId LPAREN RPAREN |
                  functionId LPAREN expression_list RPAREN |
                  object PERIOD functionId LPAREN expression_list RPAREN;

functionId ::= ID ;

objectId ::= ID ;

classId ::= ID ;
