import java_cup.runtime.*;

terminal IMPORT;
terminal JAVA;
terminal CLASS;
terminal STATIC;
terminal RETURN;
terminal PUBLIC;
terminal NEW;
terminal INT;
terminal SCANNER;
terminal IN;
terminal SYSTEM;
terminal VOID;
terminal MAIN;
terminal STRING;
terminal ARGS;
terminal BOOLEAN;
terminal IF
terminal ELSE;
terminal WHILE;
terminal OUT;
terminal PRINTLN;
terminal NEXTINT;
terminal TRUE;
terminal FALSE;
terminal THIS;
terminal NE;
terminal LE;
terminal GE;
terminal LT;
terminal GT;
terminal AND;
terminal OR;
terminal COMMENT;
terminal EQ;
terminal SEMICOLON;
terminal LCURLBRACKET;
terminal RCURLBRACKET;
terminal LSQRBRACKET;
terminal RSQRBRACKET;
terminal LPAREN;
terminal RPAREN;
terminal ASSIGN;
terminal PERIOD;
terminal COMMA;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal DIVIDE;
terminal NOT;
terminal ID;
terminal INTEGER;
terminal UTIL;
terminal ASTERISK;
terminal ID;

non terminal program;
non terminal class-definition;
non terminal class-definitionList;
non terminal member-list;
non terminal member-listList;
non terminal member-declaration;
non terminal member-declarationList;
non terminal staticOption;
non terminal member-declarator;
non terminal function-definition;
non terminal variable-declarationList;
non terminal variable-declaration;
non terminal optionIdOption;
non terminal sqBracketList;
non terminal returnExpressionOption;
non terminal function-declaration;
non terminal main-declaration;
non terminal main-declarationOption;
non terminal type;
non terminal argument-declaration-listOption;
non terminal argument-declaration-listList;
non terminal argument-declaration-list;
non terminal argument-declaration;
non terminal compound-statement;
non terminal statement-listOption;
non terminal statement-listList;
non terminal statement-list;
non terminal statement;
non terminal assignment-statement;
non terminal expression;
non terminal expression-list;
non terminal term;
non terminal primary-expression;
non terminal object;
non terminal variable;
non terminal function-call;
non terminal classId;
non terminal objectId;
non terminal functionId;


start with program;

program ::= IMPORT JAVA PERIOD UTIL PERIOD ASTERISK SEMICOLON class-definitionList ;

class-definitionList ::= class-definition | class-definitionList class-definition ;

class-definition ::= CLASS classId LCURLBRACKET member-listList RCURLBRACKET ;

member-listList ::= member-list | member-listList member-list ;

member-list ::= member-declaration member-declarationList ;

member-declarationList ::= member-declaration | member-declarationList member-declaration ;

member-declaration ::= member-declarator SEMICOLON | function-definition ;

member-declarator ::= staticOption variable-declaration ;

staticOption ::= STATIC | ;

function-definition ::= function-declaration LCURLBRACKET
                        variable-declarationList
                        statement-listOption
                        returnExpressionOption RCURLBRACKET ;

returnExpressionOption ::= RETURN expression SEMICOLON | ;

variable-declarationList ::= variable-declarationList variable-declaration SEMICOLON | ;

function-declaration ::= PUBLIC staticOption type function-identifier
                         LPAREN argument-declaration-listOption RPAREN
                         | main-declaration ;

variable-declaration ::= type objectId objectIdOption objectIdOption ;

objectIdOption ::= sqBracketList EQ NEW INT LSQRBRACKET INTEGER RSQRBRACKET sqBracketList ;

sqBracketList ::= sqBracketList LSQRBRACKET RSQRBRACKET | sqBracketList LSQRBRACKET INTEGER RSQRBRACKET | ;

main-declaration ::= main-declarationOption
                     PUBLIC STATIC VOID MAIN LPAREN STRING ARGS LSQRBRACKET RSQRBRACKET RPAREN ;

main-declarationOption ::= STATIC SCANNER IN EQ NEW SCANNER LPAREN SYSTEM PERIOD IN RPAREN SEMICOLON | ;

type ::= class-identifier | INT | BOOLEAN ;

argument-declaration-listOption ::= argument-declaration-list | ;

argument-declaration-list ::= argument-declaration {, argument-declaration}

argument-declaration-listList ::= argument-declaration-listList COMMA argument-declaration | ;

argument-declaration ::== type objectId sqBracketList ;

compound-statement ::= LSQRBRACKET statement-list RSQRBRACKET ;

statement-listOption ::= statement-list | ;

statement-list ::= statement statement-listList ;

statement-listList ::= statement-listList statement-list | ;

statement ::= compound-statement
| assignment-statement ;
| if ( expression ) statement [else statement]
| while ( expression ) statement
| System . out . println ( expression );










assignment-statement ::= variable = expression
| variable = new class-identifier ()
| variable = in . nextInt ()
expression ::= term | expression binary-operator expression
expression-list ::= expression {, expression}
term ::= primary-expression | unary-operator term
primary-expression ::= object | integer | true | false | ( expression )
object ::= variable | function-call
variable ::= this | [object .] object-identifier {[ expression ]}
function-call ::= [object .] function-identifier ( [expression-list] )

classId ::= ID ;

objectId ::= ID ;

functionId ::= ID ;
