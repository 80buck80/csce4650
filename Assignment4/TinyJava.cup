import java_cup.runtime.*;

terminal IMPORT;
terminal JAVA;
terminal CLASS;
terminal STATIC;
terminal RETURN;
terminal PUBLIC;
terminal NEW;
terminal INT;
terminal SCANNER;
terminal IN;
terminal SYSTEM;
terminal VOID;
terminal MAIN;
terminal STRING;
terminal ARGS;
terminal BOOLEAN;
terminal IF;
terminal ELSE;
terminal WHILE;
terminal OUT;
terminal PRINTLN;
terminal NEXTINT;
terminal TRUE;
terminal FALSE;
terminal THIS;
terminal NE;
terminal LE;
terminal GE;
terminal LT;
terminal GT;
terminal AND;
terminal OR;
terminal COMMENT;
terminal EQ;
terminal SEMICOLON;
terminal LCURLBRACKET;
terminal RCURLBRACKET;
terminal LSQRBRACKET;
terminal RSQRBRACKET;
terminal LPAREN;
terminal RPAREN;
terminal ASSIGN;
terminal PERIOD;
terminal COMMA;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal DIVIDE;
terminal NOT;
terminal ID;
terminal INTEGER;
terminal UTIL;
terminal ASTERISK;


non terminal program;
non terminal class_definition;
non terminal class_definitionList;
non terminal member_list;
non terminal member_listList;
non terminal member_declaration;
non terminal member_declarationList;
non terminal staticOption;
non terminal member_declarator;
non terminal function_definition;
non terminal variable_declarationList;
non terminal variable_declaration;
non terminal optionIdOption;
non terminal sqBracketList;
non terminal returnExpressionOption;
non terminal function_declaration;
non terminal main_declaration;
non terminal main_declarationOption;
non terminal type;
non terminal argument_declaration_listOption;
non terminal argument_declaration_listList;
non terminal argument_declaration_list;
non terminal argument_declaration;
non terminal compound_statement;
non terminal statement_listOption;
non terminal statement_listList;
non terminal statement_list;
non terminal statement;
non terminal assignment_statement;
non terminal elseOption;
non terminal expression;
non terminal andExpression;
non terminal relationalOperator;
non terminal relationalExpression;
non terminal arithmeticExpression;
non terminal addingOperator;
non terminal multiplyingOperator;
non terminal unaryOperator;
non terminal expression_list;
non terminal expression_listList;
non terminal term;
non terminal primary_expression;
non terminal object;
non terminal variable;
non terminal expressionList;
non terminal function_call;
non terminal classId;
non terminal objectId;
non terminal functionId;


start with program;

program ::= IMPORT JAVA PERIOD UTIL PERIOD ASTERISK SEMICOLON class_definitionList ;

class_definitionList ::= class_definition | class_definitionList class_definition ;

class_definition ::= CLASS classId LCURLBRACKET member_listList RCURLBRACKET ;

member_listList ::= member_list | member_listList member_list ;

member_list ::= member_declaration member_declarationList ;

member_declarationList ::= member_declaration | member_declarationList member_declaration ;

member_declaration ::= member_declarator SEMICOLON | function_definition ;

member_declarator ::= staticOption variable_declaration ;

staticOption ::= STATIC | ;

function_definition ::= function_declaration LCURLBRACKET
                        variable_declarationList
                        statement_listOption
                        returnExpressionOption RCURLBRACKET ;

returnExpressionOption ::= RETURN expression SEMICOLON | ;

variable_declarationList ::= variable_declarationList variable_declaration SEMICOLON | ;

function_declaration ::= PUBLIC staticOption type function_identifier
                         LPAREN argument_declaration_listOption RPAREN
                         | main_declaration ;

variable_declaration ::= type objectId objectIdOption objectIdOption ;

objectIdOption ::= sqBracketList EQ NEW INT LSQRBRACKET INTEGER RSQRBRACKET sqBracketList ;

sqBracketList ::= sqBracketList LSQRBRACKET RSQRBRACKET | sqBracketList LSQRBRACKET INTEGER RSQRBRACKET | ;

main_declaration ::= main_declarationOption
                     PUBLIC STATIC VOID MAIN LPAREN STRING ARGS LSQRBRACKET RSQRBRACKET RPAREN ;

main_declarationOption ::= STATIC SCANNER IN EQ NEW SCANNER LPAREN SYSTEM PERIOD IN RPAREN SEMICOLON | ;

type ::= class_identifier | INT | BOOLEAN ;

argument_declaration_listOption ::= argument_declaration_list | ;

argument_declaration_list ::= argument_declaration LCURLBRACKET argument_declaration RCURLBRACKET ;

argument_declaration_listList ::= argument_declaration_listList COMMA argument_declaration | ;

argument_declaration ::= type objectId sqBracketList ;

compound_statement ::= LSQRBRACKET statement_list RSQRBRACKET ;

statement_listOption ::= statement_list | ;

statement_list ::= statement statement_listList ;

statement_listList ::= statement_listList statement_list | ;

statement ::= compound_statement
              | assignment_statement
              | IF LPAREN expression RPAREN statement elseOption
              | WHILE LPAREN expression RPAREN statement
              | SYSTEM PERIOD OUT PERIOD PRINTLN LPAREN expression RPAREN;

elseOption ::= ELSE statement | ;

assignment_statement ::= variable EQUALS expression
                        | variable EQUALS NEW class_identifier LPAREN RPAREN
                        | variable EQUALS IN PERIOD NEXTINT LPAREN RPAREN;

expression ::= expression OR andExpression | andExpression ;

andExpression ::= andExpression AND relationalExpression
                  | relationalExpression ;

relationalExpression ::= relationalExpression relationalOperator arithmeticExpression
                        | arithmeticExpression ;

relationalOperator ::= LT | LE | GT | GE | EQ | NE ;

arithmeticExpression ::= term | arithmeticExpression addingOperator term ;

addingOperator ::= PLUS | MINUS ;

term ::= factor | term multiplyingOperator factor ;

multiplyingOperator ::= TIMES | DIVIDE ;

factor ::= primaryExpression | unaryOperator factor ;

unaryOperator ::= addingOperator | NOT ;

primary_expression ::= object | INTEGER | TRUE | FALSE | LPAREN expression RPAREN ;

object ::= variable | function_call ;

variable ::= THIS | objectOption objectId expressionList  ;

objectOption ::= object PERIOD | ;

expressionList ::= expressionList LSQRBRACKET expression RSQRBRACKET | ;

function_call ::= objectOption functionId LPAREN expressionListOption RPAREN ;

expressionListOption ::= LSQRBRACKET expression_list RSQRBRACKET | ;

expression_list ::= expression expression_listList ;

expression_listList ::= expresison_listList COMMA expression | ;

classId ::= ID ;

objectId ::= ID ;

functionId ::= ID ;
