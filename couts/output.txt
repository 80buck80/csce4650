"#include <stdio.h>\n" + 
"\n" + 
"int main () {\n" + 
"  int my_list [100]; \n" + 
"  int my_list_tl [100];\n" + 
"  int r; \n" + 
"  int h; \n" + 
"  int i;\n" + 
"  int _T1;\n" + 
"  int _T2;\n" + 
"  int _T3;\n" + 
"  int _T4;\n" + 
"  int _T5;\n" + 
"  int _T6;\n" + 
"  int _T7;\n" + 
"  r = 2;\n" + 
"_L1:\n" + 
"  if (r < 5) goto _L2;\n" + 
"  goto _L3;\n" + 
"_L2:\n" + 
"  _T1 = r - 2;\n" + 
"  my_list [_T1] = r;\n" + 
"  _T2 = r + 1;\n" + 
"  r = _T2;\n" + 
"  goto _L1;\n" + 
"_L3:\n" + 
"  _T3 = my_list [0];\n" + 
"  h = _T3;\n" + 
"  i = r;\n" + 
"_L4:\n" + 
"  if (i > 0) goto _L5;\n" + 
"  goto _L6;\n" + 
"_L5:\n" + 
"  _T4 = i - 1;\n" + 
"  _T5 = my_list [i];\n" + 
"  my_list_tl [_T4] = _T5;\n" + 
"  _T6 = i - 1;\n" + 
"  i = _T6;\n" + 
"  goto _L4;\n" + 
"_L6:\n" + 
"  printf ("%d", h); \n" + 
"  _T7 = my_list_tl [0];\n" + 
"  printf ("%d", _T7);\n" + 
"  return 0;\n" + 
"}\n" + 
"#include <stdio.h>\n" + 
"\n" + 
"int h;\n" + 
"\n" + 
"int area (int* _formal) {\n" + 
"  int x;\n" + 
"  int y;\n" + 
"  int z;\n" + 
"  int _T1;\n" + 
"  int _T2;\n" + 
"  int _T3;\n" + 
"  int _T4;\n" + 
"  int _T5;\n" + 
"  int _T6;\n" + 
"  x = _formal [0];\n" + 
"  y = _formal [1];\n" + 
"  _T1 = x * y;\n" + 
"  _T2 = x * h;\n" + 
"  _T3 = _T1 + _T2;\n" + 
"  _T4 = y * h;\n" + 
"  _T5 = _T3 + _T4;\n" + 
"  _T6 = 2 * _T5;\n" + 
"  z = _T6;\n" + 
"  return z;\n" + 
"}\n" + 
"\n" + 
"int main () {\n" + 
"  int a; \n" + 
"  int b; \n" + 
"  int s;\n" + 
"  int _T1;\n" + 
"  int _actual [2];\n" + 
"  scanf ("%d", &a);\n" + 
"  scanf ("%d", &b);\n" + 
"  scanf ("%d", &h);\n" + 
"  _actual [0] = a;\n" + 
"  _actual [1] = b;\n" + 
"  _T1 = area (_actual);\n" + 
"  s = _T1;\n" + 
"  printf ("%d", s);\n" + 
"  return 0;\n" + 
"}\n" + 
"#include <stdio.h>\n" + 
"\n" + 
"int facto (int* _formal) {\n" + 
"  int x;\n" + 
"  int s;\n" + 
"  int _T1;\n" + 
"  int _T2;\n" + 
"  int _T3;\n" + 
"  int _actual [1];\n" + 
"  x = _formal [0];\n" + 
"  if (x == 1) goto _L1;\n" + 
"  goto _L2;\n" + 
"_L1:\n" + 
"  s = 1;\n" + 
"  goto _L3;\n" + 
"_L2:\n" + 
"  _T1 = x - 1;\n" + 
"  _actual [0] = _T1;\n" + 
"  _T2 = facto (_actual);\n" + 
"  _T3 = x * _T2;\n" + 
"  s = _T3;\n" + 
"_L3:\n" + 
"  return s;\n" + 
"}\n" + 
"\n" + 
"int main () {\n" + 
"  int i; \n" + 
"  int fac;\n" + 
"  int _T1;\n" + 
"  int _actual [1];\n" + 
"  scanf ("%d", &i);\n" + 
"  _actual [0] = i;\n" + 
"  _T1 = facto (_actual);\n" + 
"  fac = _T1;\n" + 
"  printf ("%d", fac);\n" + 
"  return 0;\n" + 
"}\n" + 
"#include <stdio.h>\n" + 
"\n" + 
"int f (int* _formal) {\n" + 
"  int* a;\n" + 
"  int i;\n" + 
"  int x;\n" + 
"  int _T1;\n" + 
"  a = (int *) _formal [0];\n" + 
"  i = _formal [1];\n" + 
"  _T1 = a [i];\n" + 
"  x = _T1;\n" + 
"  a [i] = 0;\n" + 
"  i = 622;\n" + 
"  return x;\n" + 
"}\n" + 
"\n" + 
"int main ()\n" + 
"{\n" + 
"  int b [100];\n" + 
"  int i;\n" + 
"  int n;\n" + 
"  int _T1;\n" + 
"  int _T2;\n" + 
"  int _T3;\n" + 
"  int _T4;\n" + 
"  int _actual [2];\n" + 
"  n = 40;\n" + 
"  i = 0;\n" + 
"_L1:\n" + 
"  if (i < 100) goto _L2;\n" + 
"  goto _L3;\n" + 
"_L2:\n" + 
"  _T1 = i * i;\n" + 
"  b [i] = _T1;\n" + 
"  _T2 = i + 1;\n" + 
"  i = _T2;\n" + 
"  goto _L1;\n" + 
"_L3:\n" + 
"  printf ("%d", n);\n" + 
"  _actual [0] = (int) b;\n" + 
"  _actual [1] = n;\n" + 
"  _T3 = f (_actual);\n" + 
"  printf ("%d", _T3);\n" + 
"  printf ("%d", n);\n" + 
"  _T4 = b [n];\n" + 
"  printf ("%d", _T4);\n" + 
"  return 0;\n" + 
"}\n" + 
"#include <stdio.h>\n" + 
"\n" + 
"typedef struct {\n" + 
"  int length;\n" + 
"  int max;\n" + 
"  int list [100];\n" + 
"} List;\n" + 
"\n" + 
"int _List_initialize (int* _formal) {\n" + 
"  List* _this;\n" + 
"  int n;\n" + 
"  int flag;\n" + 
"  int i;\n" + 
"  int _T1;\n" + 
"  _this = (List *) _formal [0];\n" + 
"  n = _formal [1];\n" + 
"  _this -> length = 0;\n" + 
"  _this -> max = 100;\n" + 
"  if (n <= 0) goto _L2;\n" + 
"  goto _L1;\n" + 
"_L1:\n" + 
"  _T1 = _this -> max;\n" + 
"  if (n > _T1) goto _L2;\n" + 
"  goto _L3;\n" + 
"_L2:\n" + 
"  flag = 0;\n" + 
"  goto _L4;\n" + 
"_L3:\n" + 
"  flag = n;\n" + 
"_L4:\n" + 
"  return flag;\n" + 
"}\n" + 
"\n" + 
"int _List_getLength (int* _formal) { \n" + 
"  List* _this;\n" + 
"  int _T1;\n" + 
"  _this = (List *) _formal [0];\n" + 
"  _T1 = _this -> length; \n" + 
"  return _T1;\n" + 
"}\n" + 
"\n" + 
"int _List_nil (int* _formal) { \n" + 
"  List* _this;\n" + 
"  int nul;\n" + 
"  int _T1;\n" + 
"  _this = (List *) _formal [0];\n" + 
"  _T1 = _this -> length;\n" + 
"  if (_T1 > 0) goto _L1;\n" + 
"  goto _L2;\n" + 
"_L1:\n" + 
"  nul = 0; \n" + 
"  goto _L3;\n" + 
"_L2:\n" + 
"  nul = 1;\n" + 
"_L3:\n" + 
"  return nul;\n" + 
"}\n" + 
"\n" + 
"List _List_cons (int* _formal) {\n" + 
"  List* _this;\n" + 
"  int a;\n" + 
"  int i;\n" + 
"  List cons_list;\n" + 
"  int _T1;\n" + 
"  int _T2;\n" + 
"  int _T3;\n" + 
"  int _T4;\n" + 
"  int* _T5;\n" + 
"  int _T6;\n" + 
"  int* _T7;\n" + 
"  int _T8;\n" + 
"  int* _T9;\n" + 
"  int _T10;\n" + 
"  int _T11;\n" + 
"  int _actual [2];\n" + 
"  _this = (List *) _formal [0];\n" + 
"  a = _formal [1];\n" + 
"  _actual [0] = (int) &cons_list;\n" + 
"  _T1 = _this -> length;\n" + 
"  _T2 = _T1 + 1;\n" + 
"  _actual [1] = _T2;\n" + 
"  _T3 = _List_initialize (_actual);\n" + 
"  cons_list . length = _T3;\n" + 
"  _T4 = cons_list . length;\n" + 
"  if (_T4 > 0) goto _L1;\n" + 
"  goto _L2;\n" + 
"_L1:\n" + 
"  _T5 = cons_list . list;\n" + 
"  _T5 [0] = a;\n" + 
"  i = 0;\n" + 
"_L3:\n" + 
"  _T6 = _this -> length;\n" + 
"  if (i < _T6) goto _L4;\n" + 
"  goto _L5;\n" + 
"_L4:\n" + 
"  _T7 = cons_list . list;\n" + 
"  _T8 = i + 1;\n" + 
"  _T9 = _this -> list;\n" + 
"  _T10 = _T9 [i];\n" + 
"  _T7 [_T8] = _T10;\n" + 
"  _T11 = i + 1;\n" + 
"  i = _T11;\n" + 
"  goto _L3;\n" + 
"_L5:\n" + 
"_L2:\n" + 
"  return cons_list;\n" + 
"}\n" + 
"\n" + 
"int _List_head (int* _formal) {\n" + 
"  List* _this;\n" + 
"  int head;\n" + 
"  int _T1;\n" + 
"  int* _T2;\n" + 
"  _this = (List *) _formal [0];\n" + 
"  _T1 = _this -> length;\n" + 
"  if (_T1 == 0) goto _L1;\n" + 
"  goto _L2;\n" + 
"_L1:\n" + 
"  head = 0;\n" + 
"  goto _L3;\n" + 
"_L2:\n" + 
"  _T2 = _this -> list;\n" + 
"  head = _T2 [0];\n" + 
"_L3:\n" + 
"  return head;\n" + 
"}\n" + 
"\n" + 
"List _List_tail (int* _formal) {\n" + 
"  List* _this;\n" + 
"  int i;\n" + 
"  List tail_list;\n" + 
"  int _T1;\n" + 
"  int _T2;\n" + 
"  int _T3;\n" + 
"  int* _T4;\n" + 
"  int _T5;\n" + 
"  List _T6;\n" + 
"  int _T7;\n" + 
"  int _actual [2];\n" + 
"  _this = (List *) _formal [0];\n" + 
"  _actual [0] = (int) &tail_list;\n" + 
"  _T1 = _this -> length;\n" + 
"  _T2 = _T1 - 1;\n" + 
"  _actual [1] = _T2;\n" + 
"  _T3 = _List_initialize (_actual);\n" + 
"  i = _T3;\n" + 
"_L1:\n" + 
"  if (i > 0) goto _L2;\n" + 
"  goto _L3;\n" + 
"_L2:\n" + 
"  _actual [0] = (int) &tail_list;\n" + 
"  _T4 = _this -> list;\n" + 
"  _T5 = _T4 [i];\n" + 
"  _actual [1] = _T5;\n" + 
"  _T6 = _List_cons (_actual);\n" + 
"  tail_list = _T6;\n" + 
"  _T7 = i - 1;\n" + 
"  i = _T7;\n" + 
"  goto _L1;\n" + 
"_L3:\n" + 
"  return tail_list;\n" + 
"}\n" + 
"\n" + 
"int _List_equals (int* _formal) {\n" + 
"  List* _this;\n" + 
"  List list2;\n" + 
"  int equals;\n" + 
"  int i;\n" + 
"  int _T1;\n" + 
"  int _T2;\n" + 
"  int _T3;\n" + 
"  int* _T4;\n" + 
"  int _T5;\n" + 
"  int* _T6;\n" + 
"  int _T7;\n" + 
"  int _T8;\n" + 
"  int _T9;\n" + 
"  _this = (List *) _formal [0];\n" + 
"  list2 = * ((List *) _formal [1]);\n" + 
"  _T1 = _this -> length;\n" + 
"  _T2 = list2 . length;\n" + 
"  if (_T1 != _T2) goto _L1;\n" + 
"  goto _L2;\n" + 
"_L1:\n" + 
"  equals = 0;\n" + 
"  goto _L3;\n" + 
"_L2:\n" + 
"  equals = 1;\n" + 
"  i = 0;\n" + 
"_L4:\n" + 
"  _T3 = _this -> length;\n" + 
"  if (i < _T3) goto _L5;\n" + 
"  goto _L6;\n" + 
"_L5:\n" + 
"  _T4 = _this -> list;\n" + 
"  _T5 = _T4 [i];\n" + 
"  _T6 = list2 . list;\n" + 
"  _T7 = _T6 [i];\n" + 
"  if (_T5 == _T7) goto _L7;\n" + 
"  goto _L6;\n" + 
"_L7:\n" + 
"  _T8 = i + 1;\n" + 
"  i = _T8;\n" + 
"  goto _L4;\n" + 
"_L6:\n" + 
"  _T9 = _this -> length;\n" + 
"  if (i < _T9) goto _L8;\n" + 
"  goto _L9;\n" + 
"_L8:\n" + 
"   equals = 0;\n" + 
"_L9:\n" + 
"_L3:\n" + 
"  return equals;\n" + 
"}\n" + 
"\n" + 
"int _List_print (int* _formal) {\n" + 
"  List* _this;\n" + 
"  int i;\n" + 
"  int _T1;\n" + 
"  int* _T2;\n" + 
"  int _T3;\n" + 
"  int _T4;\n" + 
"  int _T5;\n" + 
"  _this = (List *) _formal [0];\n" + 
"  printf ("%d", 88888);\n" + 
"  i = 0;\n" + 
"_L1:\n" + 
"  _T1 = _this -> length;\n" + 
"  if (i < _T1) goto _L2;\n" + 
"  goto _L3;\n" + 
"_L2:\n" + 
"  _T2 = _this -> list;\n" + 
"  _T3 = _T2 [i];\n" + 
"  printf ("%d", _T3);\n" + 
"  _T4 = i + 1;\n" + 
"  i = _T4;\n" + 
"  goto _L1;\n" + 
"_L3:\n" + 
"  printf ("%d", 88888);\n" + 
"  _T5 = _this -> length;\n" + 
"  return _T5;\n" + 
"}\n" + 
"\n" + 
"int main () {\n" + 
"  int i; \n" + 
"  List l1; \n" + 
"  List l2;\n" + 
"  List my_list;\n" + 
"  int _T1;\n" + 
"  int _T2;\n" + 
"  List _T3;\n" + 
"  int _T4;\n" + 
"  int _T5;\n" + 
"  int _T6;\n" + 
"  int _T7;\n" + 
"  int _T8;\n" + 
"  List _T9;\n" + 
"  int _T10;\n" + 
"  List _T11;\n" + 
"  List _T12;\n" + 
"  int _T13;\n" + 
"  int _T14;\n" + 
"  int _actual [2];\n" + 
"  _actual [0] = (int) &my_list;\n" + 
"  _T1 = _List_nil (_actual);\n" + 
"  printf ("%d", _T1);\n" + 
"  _actual [0] = (int) &my_list;\n" + 
"  _actual [1] = 20;\n" + 
"  _T2 = _List_initialize (_actual);\n" + 
"  i = _T2;\n" + 
"  i = 10;\n" + 
"_L1:\n" + 
"  if (i > 0) goto _L2;\n" + 
"  goto _L3;\n" + 
"_L2:\n" + 
"  _actual [0] = (int) &my_list;\n" + 
"  _actual [1] = i;\n" + 
"  _T3 = _List_cons (_actual);\n" + 
"  my_list = _T3;\n" + 
"  _T4 = i - 1;\n" + 
"  i = _T4;\n" + 
"  goto _L1;\n" + 
"_L3:\n" + 
"  _actual [0] = (int) &my_list;\n" + 
"  _T5 = _List_print (_actual);\n" + 
"  i = _T5;\n" + 
"  _actual [0] = (int) &my_list;\n" + 
"  _T6 = _List_nil (_actual);\n" + 
"  if (_T6 == 1) goto _L4;\n" + 
"  goto _L5;\n" + 
"_L4:\n" + 
"  printf ("%d", 1);\n" + 
"  goto _L6;\n" + 
"_L5:\n" + 
"  printf ("%d", 0);\n" + 
"_L6:\n" + 
"  _actual [0] = (int) &my_list;\n" + 
"  _T7 = _List_getLength (_actual);\n" + 
"  printf ("%d", _T7);\n" + 
"  _actual [0] = (int) &my_list;\n" + 
"  _T8 = _List_head (_actual);\n" + 
"  printf ("%d", _T8);\n" + 
"  _actual [0] = (int) &my_list;\n" + 
"  _T9 = _List_tail (_actual);\n" + 
"  _actual [0] = (int) &_T9;\n" + 
"  _T10 = _List_print (_actual);\n" + 
"  i = _T10;\n" + 
"  _actual [0] = (int) &my_list;\n" + 
"  _actual [1] = 0;\n" + 
"  _T11 = _List_cons (_actual);\n" + 
"  l1 = _T11;\n" + 
"  _actual [0] = (int) &my_list;\n" + 
"  _actual [1] = 0;\n" + 
"  _T12 = _List_cons (_actual);\n" + 
"  l2 = _T12;\n" + 
"  _actual [0] = (int) &l1;\n" + 
"  _actual [1] = (int) &l2;\n" + 
"  _T13 = _List_equals (_actual);\n" + 
"  if (_T13 == 1) goto _L7;\n" + 
"  goto _L8;\n" + 
"_L7:\n" + 
"  printf ("%d", 1);\n" + 
"  goto _L9;\n" + 
"_L8:\n" + 
"  printf ("%d", 0);\n" + 
"_L9:\n" + 
"  _actual [0] = (int) &my_list;\n" + 
"  _actual [1] = (int) &l1;\n" + 
"  _T14 = _List_equals (_actual);\n" + 
"  if (_T14 == 1) goto _L10;\n" + 
"  goto _L11;\n" + 
"_L10:\n" + 
"  printf ("%d", 1);\n" + 
"  goto _L12;\n" + 
"_L11:\n" + 
"  printf ("%d", 0);\n" + 
"_L12:\n" + 
"  return 0;\n" + 
"}\n" + 
"#include <stdio.h>\n" + 
"\n" + 
"int main ()\n" + 
"{\n" + 
"  int q; \n" + 
"  int r; \n" + 
"  int x; \n" + 
"  int y;\n" + 
"  int _T1;\n" + 
"  int _T2;\n" + 
"  scanf ("%d", &x);\n" + 
"  scanf ("%d", &y);\n" + 
"  q = 0;\n" + 
"  r = x;\n" + 
"_L1:\n" + 
"  if (r >= y) goto _L2;\n" + 
"  goto _L3;\n" + 
"_L2:\n" + 
"  _T1 = q + 1;\n" + 
"  q = _T1;\n" + 
"  _T2 = r - y;\n" + 
"  r = _T2;\n" + 
"  goto _L1;\n" + 
"_L3:\n" + 
"  printf ("%d", q);\n" + 
"  printf ("%d", r);\n" + 
"  return 0;\n" + 
"}\n" + 
