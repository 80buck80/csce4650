
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Apr 12 11:14:03 CDT 2018
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Apr 12 11:14:03 CDT 2018
  */
public class TinyJavaParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public TinyJavaParser() {super();}

  /** Constructor which sets the default scanner. */
  public TinyJavaParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public TinyJavaParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\004\000\002\052\002\000\002\002" +
    "\012\000\002\003\003\000\002\003\004\000\002\004\003" +
    "\000\002\004\003\000\002\053\002\000\002\054\002\000" +
    "\002\005\020\000\002\006\004\000\002\006\004\000\002" +
    "\007\003\000\002\007\003\000\002\010\005\000\002\010" +
    "\002\000\002\011\004\000\002\011\006\000\002\012\003" +
    "\000\002\012\002\000\002\013\005\000\002\013\003\000" +
    "\002\014\006\000\002\055\002\000\002\014\012\000\002" +
    "\015\004\000\002\015\003\000\002\016\004\000\002\016" +
    "\003\000\002\022\003\000\002\022\004\000\002\022\006" +
    "\000\002\022\006\000\002\022\010\000\002\022\007\000" +
    "\002\017\005\000\002\020\003\000\002\020\002\000\002" +
    "\021\004\000\002\021\003\000\002\023\005\000\002\024" +
    "\004\000\002\024\002\000\002\027\005\000\002\027\003" +
    "\000\002\030\005\000\002\030\003\000\002\031\005\000" +
    "\002\031\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\032\003\000\002\032\005\000\002\036\003" +
    "\000\002\036\003\000\002\033\003\000\002\033\005\000" +
    "\002\037\003\000\002\037\003\000\002\034\003\000\002" +
    "\034\004\000\002\041\003\000\002\041\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\005\000\002\043\003" +
    "\000\002\043\005\000\002\044\004\000\002\044\003\000" +
    "\002\045\006\000\002\045\002\000\002\046\006\000\002" +
    "\046\010\000\002\025\003\000\002\025\002\000\002\026" +
    "\005\000\002\026\003\000\002\047\003\000\002\050\003" +
    "\000\002\051\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\004\045\005\001\002\000\004\002\236\001" +
    "\002\000\004\047\006\001\002\000\004\054\007\001\002" +
    "\000\004\050\010\001\002\000\004\053\011\001\002\000" +
    "\004\024\012\001\002\000\010\004\000\041\000\046\000" +
    "\001\002\000\010\004\021\041\026\046\014\001\002\000" +
    "\004\004\ufff4\001\002\000\012\002\ufffc\004\ufffc\041\ufffc" +
    "\046\ufffc\001\002\000\012\002\ufffb\004\ufffb\041\ufffb\046" +
    "\ufffb\001\002\000\004\024\235\001\002\000\004\004\051" +
    "\001\002\000\006\004\uffaf\033\uffaf\001\002\000\004\004" +
    "\ufff5\001\002\000\012\002\ufffe\004\ufffe\041\ufffe\046\ufffe" +
    "\001\002\000\006\024\050\031\044\001\002\000\012\002" +
    "\uffff\004\021\041\026\046\014\001\002\000\004\004\021" +
    "\001\002\000\004\033\030\001\002\000\006\034\032\051" +
    "\uffea\001\002\000\004\051\033\001\002\000\004\024\uffeb" +
    "\001\002\000\004\023\034\001\002\000\006\004\021\046" +
    "\014\001\002\000\010\004\uffe7\034\uffe7\046\uffe7\001\002" +
    "\000\006\024\043\031\044\001\002\000\010\004\uffe5\034" +
    "\uffe5\046\uffe5\001\002\000\010\004\021\034\042\046\014" +
    "\001\002\000\010\004\uffe8\034\uffe8\046\uffe8\001\002\000" +
    "\004\024\uffe9\001\002\000\010\004\uffe6\034\uffe6\046\uffe6" +
    "\001\002\000\004\005\045\001\002\000\004\032\046\001" +
    "\002\000\012\024\ufff0\026\ufff0\030\ufff0\031\ufff0\001\002" +
    "\000\012\002\ufffd\004\ufffd\041\ufffd\046\ufffd\001\002\000" +
    "\012\002\ufff6\004\ufff6\041\ufff6\046\ufff6\001\002\000\052" +
    "\006\uffae\007\uffae\011\uffae\012\uffae\013\uffae\014\uffae\015" +
    "\uffae\016\uffae\017\uffae\020\uffae\021\uffae\022\uffae\024\uffae" +
    "\025\uffae\026\uffae\027\uffad\030\uffae\031\uffae\032\uffae\035" +
    "\uffae\001\002\000\012\024\ufff1\026\ufff1\030\ufff1\031\ufff1" +
    "\001\002\000\004\027\ufffa\001\002\000\004\027\055\001" +
    "\002\000\010\004\021\030\uffee\046\014\001\002\000\004" +
    "\030\065\001\002\000\004\004\064\001\002\000\010\026" +
    "\uffec\030\uffec\031\044\001\002\000\006\026\062\030\uffef" +
    "\001\002\000\006\004\021\046\014\001\002\000\010\026" +
    "\uffed\030\uffed\031\044\001\002\000\012\024\uffae\026\uffae" +
    "\030\uffae\031\uffae\001\002\000\004\033\ufff9\001\002\000" +
    "\004\033\067\001\002\000\022\004\ufff2\033\ufff2\040\ufff2" +
    "\042\ufff2\044\ufff2\046\ufff2\052\ufff2\055\ufff2\001\002\000" +
    "\022\004\102\033\101\040\077\042\111\044\100\046\014" +
    "\052\uffdc\055\075\001\002\000\050\006\uffb6\007\uffb6\011" +
    "\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6" +
    "\020\uffb6\021\uffb6\022\uffb6\024\uffb6\025\uffb6\026\uffb6\030" +
    "\uffb6\031\uffb6\032\uffb6\035\uffb6\001\002\000\024\004\uffe4" +
    "\033\uffe4\034\uffe4\040\uffe4\042\uffe4\043\uffe4\044\uffe4\052" +
    "\uffe4\055\uffe4\001\002\000\022\004\uffda\033\uffda\034\uffda" +
    "\040\uffda\042\uffda\044\uffda\052\uffda\055\uffda\001\002\000" +
    "\004\024\230\001\002\000\004\027\224\001\002\000\004" +
    "\027\221\001\002\000\004\036\216\001\002\000\004\027" +
    "\207\001\002\000\016\004\051\033\101\040\077\042\111" +
    "\044\100\055\075\001\002\000\014\004\uffaf\025\uffae\027" +
    "\uffad\031\uffae\035\uffae\001\002\000\046\006\uffbb\007\uffbb" +
    "\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017" +
    "\uffbb\020\uffbb\021\uffbb\022\uffbb\024\uffbb\025\uffbb\026\uffbb" +
    "\030\uffbb\032\uffbb\035\uffbb\001\002\000\004\052\201\001" +
    "\002\000\006\024\200\031\044\001\002\000\020\004\051" +
    "\033\101\040\077\042\111\044\100\052\uffdd\055\075\001" +
    "\002\000\006\025\146\035\175\001\002\000\046\006\uffb8" +
    "\007\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016" +
    "\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\024\uffb8\025\uffb8" +
    "\026\uffb8\030\uffb8\032\uffb8\035\uffb8\001\002\000\004\037" +
    "\172\001\002\000\004\025\113\001\002\000\004\004\114" +
    "\001\002\000\004\027\uffad\001\002\000\004\027\116\001" +
    "\002\000\020\004\051\005\136\010\122\017\120\020\133" +
    "\027\124\030\uffb2\001\002\000\004\030\171\001\002\000" +
    "\016\004\uffc8\005\uffc8\010\uffc8\017\uffc8\020\uffc8\027\uffc8" +
    "\001\002\000\042\006\uffc2\007\uffc2\011\uffc2\012\uffc2\013" +
    "\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2" +
    "\022\uffc2\024\uffc2\026\uffc2\030\uffc2\032\uffc2\001\002\000" +
    "\016\004\uffbf\005\uffbf\010\uffbf\017\uffbf\020\uffbf\027\uffbf" +
    "\001\002\000\016\006\153\007\uffd5\024\uffd5\026\uffd5\030" +
    "\uffd5\032\uffd5\001\002\000\016\004\051\005\136\010\122" +
    "\017\120\020\133\027\124\001\002\000\006\026\165\030" +
    "\uffb3\001\002\000\032\006\uffd3\007\uffd3\011\156\012\160" +
    "\013\157\014\161\015\155\016\162\024\uffd3\026\uffd3\030" +
    "\uffd3\032\uffd3\001\002\000\010\007\151\026\uffb0\030\uffb0" +
    "\001\002\000\042\006\uffc6\007\uffc6\011\uffc6\012\uffc6\013" +
    "\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6" +
    "\022\uffc6\024\uffc6\026\uffc6\030\uffc6\032\uffc6\001\002\000" +
    "\016\004\051\005\136\010\122\017\120\020\133\027\124" +
    "\001\002\000\042\006\uffca\007\uffca\011\uffca\012\uffca\013" +
    "\uffca\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca\021\144" +
    "\022\143\024\uffca\026\uffca\030\uffca\032\uffca\001\002\000" +
    "\016\004\uffc7\005\uffc7\010\uffc7\017\uffc7\020\uffc7\027\uffc7" +
    "\001\002\000\044\006\uffbe\007\uffbe\011\uffbe\012\uffbe\013" +
    "\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe" +
    "\022\uffbe\024\uffbe\025\146\026\uffbe\030\uffbe\032\uffbe\001" +
    "\002\000\016\004\uffc0\005\uffc0\010\uffc0\017\uffc0\020\uffc0" +
    "\027\uffc0\001\002\000\042\006\uffbd\007\uffbd\011\uffbd\012" +
    "\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd" +
    "\021\uffbd\022\uffbd\024\uffbd\026\uffbd\030\uffbd\032\uffbd\001" +
    "\002\000\036\006\uffd1\007\uffd1\011\uffd1\012\uffd1\013\uffd1" +
    "\014\uffd1\015\uffd1\016\uffd1\017\120\020\133\024\uffd1\026" +
    "\uffd1\030\uffd1\032\uffd1\001\002\000\016\004\051\005\136" +
    "\010\122\017\120\020\133\027\124\001\002\000\042\006" +
    "\uffc9\007\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9" +
    "\016\uffc9\017\uffc9\020\uffc9\021\144\022\143\024\uffc9\026" +
    "\uffc9\030\uffc9\032\uffc9\001\002\000\016\004\051\005\136" +
    "\010\122\017\120\020\133\027\124\001\002\000\016\004" +
    "\uffc3\005\uffc3\010\uffc3\017\uffc3\020\uffc3\027\uffc3\001\002" +
    "\000\016\004\uffc4\005\uffc4\010\uffc4\017\uffc4\020\uffc4\027" +
    "\uffc4\001\002\000\042\006\uffc5\007\uffc5\011\uffc5\012\uffc5" +
    "\013\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021" +
    "\uffc5\022\uffc5\024\uffc5\026\uffc5\030\uffc5\032\uffc5\001\002" +
    "\000\004\004\051\001\002\000\046\006\uffba\007\uffba\011" +
    "\uffba\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba" +
    "\020\uffba\021\uffba\022\uffba\024\uffba\025\uffba\026\uffba\030" +
    "\uffba\032\uffba\035\uffba\001\002\000\042\006\uffc1\007\uffc1" +
    "\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017" +
    "\uffc1\020\uffc1\021\uffc1\022\uffc1\024\uffc1\026\uffc1\030\uffc1" +
    "\032\uffc1\001\002\000\016\004\051\005\136\010\122\017" +
    "\120\020\133\027\124\001\002\000\016\006\153\007\uffd6" +
    "\024\uffd6\026\uffd6\030\uffd6\032\uffd6\001\002\000\016\004" +
    "\051\005\136\010\122\017\120\020\133\027\124\001\002" +
    "\000\032\006\uffd4\007\uffd4\011\156\012\160\013\157\014" +
    "\161\015\155\016\162\024\uffd4\026\uffd4\030\uffd4\032\uffd4" +
    "\001\002\000\016\004\uffcc\005\uffcc\010\uffcc\017\uffcc\020" +
    "\uffcc\027\uffcc\001\002\000\016\004\uffd0\005\uffd0\010\uffd0" +
    "\017\uffd0\020\uffd0\027\uffd0\001\002\000\016\004\uffce\005" +
    "\uffce\010\uffce\017\uffce\020\uffce\027\uffce\001\002\000\016" +
    "\004\uffcf\005\uffcf\010\uffcf\017\uffcf\020\uffcf\027\uffcf\001" +
    "\002\000\016\004\uffcd\005\uffcd\010\uffcd\017\uffcd\020\uffcd" +
    "\027\uffcd\001\002\000\016\004\uffcb\005\uffcb\010\uffcb\017" +
    "\uffcb\020\uffcb\027\uffcb\001\002\000\016\004\051\005\136" +
    "\010\122\017\120\020\133\027\124\001\002\000\036\006" +
    "\uffd2\007\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2" +
    "\016\uffd2\017\120\020\133\024\uffd2\026\uffd2\030\uffd2\032" +
    "\uffd2\001\002\000\016\004\051\005\136\010\122\017\120" +
    "\020\133\027\124\001\002\000\010\007\151\026\uffb1\030" +
    "\uffb1\001\002\000\006\007\151\030\170\001\002\000\042" +
    "\006\uffbc\007\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015" +
    "\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\024\uffbc" +
    "\026\uffbc\030\uffbc\032\uffbc\001\002\000\046\006\uffb4\007" +
    "\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4" +
    "\017\uffb4\020\uffb4\021\uffb4\022\uffb4\024\uffb4\025\uffb4\026" +
    "\uffb4\030\uffb4\032\uffb4\035\uffb4\001\002\000\016\004\051" +
    "\005\136\010\122\017\120\020\133\027\124\001\002\000" +
    "\006\007\151\024\174\001\002\000\024\004\uffe1\033\uffe1" +
    "\034\uffe1\040\uffe1\042\uffe1\043\uffe1\044\uffe1\052\uffe1\055" +
    "\uffe1\001\002\000\016\004\051\005\136\010\122\017\120" +
    "\020\133\027\124\001\002\000\006\007\151\024\uffd9\001" +
    "\002\000\022\004\uffdb\033\uffdb\034\uffdb\040\uffdb\042\uffdb" +
    "\044\uffdb\052\uffdb\055\uffdb\001\002\000\022\004\ufff3\033" +
    "\ufff3\040\ufff3\042\ufff3\044\ufff3\046\ufff3\052\ufff3\055\ufff3" +
    "\001\002\000\016\004\051\005\136\010\122\017\120\020" +
    "\133\027\124\001\002\000\006\007\151\024\203\001\002" +
    "\000\004\034\204\001\002\000\014\002\ufff8\004\ufff8\034" +
    "\ufff8\041\ufff8\046\ufff8\001\002\000\020\004\051\033\101" +
    "\034\206\040\077\042\111\044\100\055\075\001\002\000" +
    "\024\004\uffde\033\uffde\034\uffde\040\uffde\042\uffde\043\uffde" +
    "\044\uffde\052\uffde\055\uffde\001\002\000\016\004\051\005" +
    "\136\010\122\017\120\020\133\027\124\001\002\000\006" +
    "\007\151\030\211\001\002\000\016\004\051\033\101\040" +
    "\077\042\111\044\100\055\075\001\002\000\024\004\uffd7" +
    "\033\uffd7\034\uffd7\040\uffd7\042\uffd7\043\214\044\uffd7\052" +
    "\uffd7\055\uffd7\001\002\000\024\004\uffe0\033\uffe0\034\uffe0" +
    "\040\uffe0\042\uffe0\043\uffe0\044\uffe0\052\uffe0\055\uffe0\001" +
    "\002\000\016\004\051\033\101\040\077\042\111\044\100" +
    "\055\075\001\002\000\024\004\uffd8\033\uffd8\034\uffd8\040" +
    "\uffd8\042\uffd8\043\uffd8\044\uffd8\052\uffd8\055\uffd8\001\002" +
    "\000\004\004\051\001\002\000\006\024\220\025\146\001" +
    "\002\000\024\004\uffe2\033\uffe2\034\uffe2\040\uffe2\042\uffe2" +
    "\043\uffe2\044\uffe2\052\uffe2\055\uffe2\001\002\000\020\004" +
    "\051\005\136\010\122\017\120\020\133\027\124\030\uffb2" +
    "\001\002\000\004\030\223\001\002\000\046\006\uffb5\007" +
    "\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5" +
    "\017\uffb5\020\uffb5\021\uffb5\022\uffb5\024\uffb5\025\uffb5\026" +
    "\uffb5\030\uffb5\032\uffb5\035\uffb5\001\002\000\016\004\051" +
    "\005\136\010\122\017\120\020\133\027\124\001\002\000" +
    "\006\007\151\030\226\001\002\000\016\004\051\033\101" +
    "\040\077\042\111\044\100\055\075\001\002\000\024\004" +
    "\uffdf\033\uffdf\034\uffdf\040\uffdf\042\uffdf\043\uffdf\044\uffdf" +
    "\052\uffdf\055\uffdf\001\002\000\024\004\uffe3\033\uffe3\034" +
    "\uffe3\040\uffe3\042\uffe3\043\uffe3\044\uffe3\052\uffe3\055\uffe3" +
    "\001\002\000\050\006\uffb9\007\uffb9\011\uffb9\012\uffb9\013" +
    "\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9" +
    "\022\uffb9\024\uffb9\025\uffb9\026\uffb9\030\uffb9\031\232\032" +
    "\uffb9\035\uffb9\001\002\000\016\004\051\005\136\010\122" +
    "\017\120\020\133\027\124\001\002\000\006\007\151\032" +
    "\234\001\002\000\050\006\uffb7\007\uffb7\011\uffb7\012\uffb7" +
    "\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021" +
    "\uffb7\022\uffb7\024\uffb7\025\uffb7\026\uffb7\030\uffb7\031\uffb7" +
    "\032\uffb7\035\uffb7\001\002\000\012\002\ufff7\004\ufff7\041" +
    "\ufff7\046\ufff7\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\052\012\001\001\000" +
    "\022\003\024\004\022\005\014\006\015\007\017\011\023" +
    "\014\016\047\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\050\051" +
    "\051\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\004\046\005\014" +
    "\006\015\007\017\011\023\014\016\047\021\001\001\000" +
    "\004\047\026\001\001\000\002\001\001\000\004\055\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\005\036\007\017\011\035\015\037\016\034" +
    "\047\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\005\036\007\017\011\035\016\040" +
    "\047\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\053\053\001\001\000\002" +
    "\001\001\000\014\007\056\011\057\012\055\013\060\047" +
    "\021\001\001\000\002\001\001\000\004\050\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\056\011" +
    "\062\047\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\054\065\001\001\000\002\001\001\000\004\010" +
    "\067\001\001\000\036\007\056\011\104\017\071\020\103" +
    "\021\105\022\072\023\073\042\111\043\106\044\102\046" +
    "\107\047\021\050\070\051\075\001\001\000\004\045\230" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\017\071\021\204\022\072\023" +
    "\073\042\111\043\106\044\102\046\107\050\070\051\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\017\071\022\176\023\073" +
    "\042\111\043\106\044\102\046\107\050\070\051\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\025\116\026\124\027\126" +
    "\030\122\031\125\032\136\033\131\034\127\035\120\036" +
    "\134\041\130\042\111\043\133\044\102\046\107\050\070" +
    "\051\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\027\166\030\122\031\125\032\136\033\131\034\127\035" +
    "\120\036\134\041\130\042\111\043\133\044\102\046\107" +
    "\050\070\051\075\001\001\000\002\001\001\000\004\040" +
    "\162\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\034\147\035\120\036\134\041\130\042\111\043\133\044" +
    "\102\046\107\050\070\051\075\001\001\000\004\037\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\137\001\001\000\030" +
    "\033\140\034\127\035\120\036\134\041\130\042\111\043" +
    "\133\044\102\046\107\050\070\051\075\001\001\000\004" +
    "\037\141\001\001\000\026\034\144\035\120\036\134\041" +
    "\130\042\111\043\133\044\102\046\107\050\070\051\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\042\111\044\146\046\107\050\070\051\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\030" +
    "\151\031\125\032\136\033\131\034\127\035\120\036\134" +
    "\041\130\042\111\043\133\044\102\046\107\050\070\051" +
    "\075\001\001\000\002\001\001\000\034\031\153\032\136" +
    "\033\131\034\127\035\120\036\134\041\130\042\111\043" +
    "\133\044\102\046\107\050\070\051\075\001\001\000\004" +
    "\040\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\032\163\033\131\034\127\035\120\036" +
    "\134\041\130\042\111\043\133\044\102\046\107\050\070" +
    "\051\075\001\001\000\004\036\137\001\001\000\040\027" +
    "\165\030\122\031\125\032\136\033\131\034\127\035\120" +
    "\036\134\041\130\042\111\043\133\044\102\046\107\050" +
    "\070\051\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\027\172\030" +
    "\122\031\125\032\136\033\131\034\127\035\120\036\134" +
    "\041\130\042\111\043\133\044\102\046\107\050\070\051" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\027\175\030\122\031\125\032\136\033\131\034\127\035" +
    "\120\036\134\041\130\042\111\043\133\044\102\046\107" +
    "\050\070\051\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\027\201\030\122\031\125" +
    "\032\136\033\131\034\127\035\120\036\134\041\130\042" +
    "\111\043\133\044\102\046\107\050\070\051\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\017\071\022\176\023\073\042\111\043\106\044\102" +
    "\046\107\050\070\051\075\001\001\000\002\001\001\000" +
    "\040\027\207\030\122\031\125\032\136\033\131\034\127" +
    "\035\120\036\134\041\130\042\111\043\133\044\102\046" +
    "\107\050\070\051\075\001\001\000\002\001\001\000\024" +
    "\017\071\022\211\023\073\042\111\043\106\044\102\046" +
    "\107\050\070\051\075\001\001\000\004\024\212\001\001" +
    "\000\002\001\001\000\024\017\071\022\214\023\073\042" +
    "\111\043\106\044\102\046\107\050\070\051\075\001\001" +
    "\000\002\001\001\000\016\042\111\043\216\044\102\046" +
    "\107\050\070\051\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\025\221\026\124\027\126\030\122\031" +
    "\125\032\136\033\131\034\127\035\120\036\134\041\130" +
    "\042\111\043\133\044\102\046\107\050\070\051\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\027\224" +
    "\030\122\031\125\032\136\033\131\034\127\035\120\036" +
    "\134\041\130\042\111\043\133\044\102\046\107\050\070" +
    "\051\075\001\001\000\002\001\001\000\024\017\071\022" +
    "\226\023\073\042\111\043\106\044\102\046\107\050\070" +
    "\051\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\027\232\030\122\031\125\032\136" +
    "\033\131\034\127\035\120\036\134\041\130\042\111\043" +
    "\133\044\102\046\107\050\070\051\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$TinyJavaParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$TinyJavaParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$TinyJavaParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$TinyJavaParser$actions {

 SymbolTable currentEnv, env; 
  private final TinyJavaParser parser;

  /** Constructor */
  CUP$TinyJavaParser$actions(TinyJavaParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$TinyJavaParser$do_action(
    int                        CUP$TinyJavaParser$act_num,
    java_cup.runtime.lr_parser CUP$TinyJavaParser$parser,
    java.util.Stack            CUP$TinyJavaParser$stack,
    int                        CUP$TinyJavaParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$TinyJavaParser$result;

      /* select the action based on the action number */
      switch (CUP$TinyJavaParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // functionId ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TinyJavaParser$stack.peek()).value;
		 RESULT = id; 
              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("functionId",39, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // objectId ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TinyJavaParser$stack.peek()).value;
		 RESULT = id; 
              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("objectId",38, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // classId ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TinyJavaParser$stack.peek()).value;
		 RESULT = id; 
              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("classId",37, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expressionList ::= expression 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("expressionList",20, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expressionList ::= expressionList COMMA expression 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("expressionList",20, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expressionListOption ::= 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("expressionListOption",19, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expressionListOption ::= expressionList 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("expressionListOption",19, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // functionCall ::= object DOT functionId LPAREN expressionListOption RPAREN 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("functionCall",36, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-5)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // functionCall ::= functionId LPAREN expressionListOption RPAREN 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("functionCall",36, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // subscriptList ::= 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("subscriptList",35, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // subscriptList ::= subscriptList LBRACK expression RBRACK 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("subscriptList",35, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // classMember ::= functionCall 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("classMember",34, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // classMember ::= objectId subscriptList 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("classMember",34, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // variable ::= variable DOT classMember 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("variable",33, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // variable ::= classMember 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("variable",33, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // primaryExpression ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("primaryExpression",27, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // primaryExpression ::= INTEGER 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("primaryExpression",27, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // primaryExpression ::= variable 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("primaryExpression",27, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // unaryOperator ::= NOT 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("unaryOperator",31, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // unaryOperator ::= addingOperator 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("unaryOperator",31, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // factor ::= unaryOperator factor 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("factor",26, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // factor ::= primaryExpression 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("factor",26, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // multiplyingOperator ::= SLASH 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("multiplyingOperator",29, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // multiplyingOperator ::= TIMES 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("multiplyingOperator",29, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // term ::= term multiplyingOperator factor 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("term",25, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // term ::= factor 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("term",25, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // addingOperator ::= MINUS 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("addingOperator",28, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // addingOperator ::= PLUS 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("addingOperator",28, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // arithmeticExpression ::= arithmeticExpression addingOperator term 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("arithmeticExpression",24, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // arithmeticExpression ::= term 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("arithmeticExpression",24, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // relationalOperator ::= NE 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("relationalOperator",30, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // relationalOperator ::= EQ 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("relationalOperator",30, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // relationalOperator ::= GE 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("relationalOperator",30, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // relationalOperator ::= GT 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("relationalOperator",30, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // relationalOperator ::= LE 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("relationalOperator",30, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // relationalOperator ::= LT 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("relationalOperator",30, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // relationalExpression ::= arithmeticExpression 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("relationalExpression",23, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // relationalExpression ::= relationalExpression relationalOperator arithmeticExpression 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("relationalExpression",23, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // andExpression ::= relationalExpression 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("andExpression",22, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // andExpression ::= andExpression AND relationalExpression 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("andExpression",22, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= andExpression 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= expression OR andExpression 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // elseOption ::= 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("elseOption",18, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // elseOption ::= ELSE statement 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("elseOption",18, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // assignmentStatement ::= variable ASSIGN expression 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("assignmentStatement",17, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statementList ::= statement 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("statementList",15, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statementList ::= statementList statement 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("statementList",15, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statementListOption ::= 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("statementListOption",14, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statementListOption ::= statementList 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("statementListOption",14, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // compoundStatement ::= LBRACE statementList RBRACE 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("compoundStatement",13, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= WHILE LPAREN expression RPAREN statement 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= IF LPAREN expression RPAREN statement elseOption 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-5)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= COUT OUTPUT expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= CIN INPUT variable SEMICOLON 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= assignmentStatement SEMICOLON 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= compoundStatement 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // memberDeclaration ::= functionDefinition 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("memberDeclaration",12, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // memberDeclaration ::= declarator SEMICOLON 
            {
              Object RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)).right;
		Declarator decl = (Declarator)((java_cup.runtime.Symbol) CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)).value;
		
      env . enterVar (decl . id (), decl . type ());
    
              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("memberDeclaration",12, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // memberList ::= memberDeclaration 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("memberList",11, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // memberList ::= memberList memberDeclaration 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("memberList",11, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // classSpecifier ::= CLASS classId LBRACE NT$3 PUBLIC COLON memberList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-6)).value;
		
        env = env . parent (); /* restore env */
      
              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("classSpecifier",10, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-7)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$3 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)).value;

        currentEnv = env;                   /* save current env */
        env = new SymbolTable (currentEnv); /* start new scope */
        currentEnv . enterClass (id, env);
      
              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("NT$3",43, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // classSpecifier ::= CLASS classId LBRACE RBRACE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-2)).value;
		 env . enterClass (id, new SymbolTable (env)); 
              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("classSpecifier",10, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // argumentDeclarationList ::= declarator 
            {
              Object RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()).right;
		Declarator decl = (Declarator)((java_cup.runtime.Symbol) CUP$TinyJavaParser$stack.peek()).value;
		
      env . enterVar (decl . id (), decl . type ());
    
              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("argumentDeclarationList",9, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // argumentDeclarationList ::= argumentDeclarationList COMMA declarator 
            {
              Object RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()).right;
		Declarator decl = (Declarator)((java_cup.runtime.Symbol) CUP$TinyJavaParser$stack.peek()).value;
		
      env . enterVar (decl . id (), decl . type ());
    
              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("argumentDeclarationList",9, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // argumentDeclarationListOption ::= 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("argumentDeclarationListOption",8, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // argumentDeclarationListOption ::= argumentDeclarationList 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("argumentDeclarationListOption",8, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declarator ::= declarator LBRACK INTEGER RBRACK 
            {
              Declarator RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-3)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-3)).right;
		Declarator decl = (Declarator)((java_cup.runtime.Symbol) CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-3)).value;
		int dimensionleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)).left;
		int dimensionright = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)).right;
		String dimension = (String)((java_cup.runtime.Symbol) CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)).value;
		
      RESULT = new Declarator (decl . id (), 
        new ArrayType (Integer . parseInt (dimension), decl . type ()));
    
              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("declarator",7, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declarator ::= simpleTypeName objectId 
            {
              Declarator RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TinyJavaParser$stack.peek()).value;
		 
      RESULT = new Declarator (id, type); 
    
              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("declarator",7, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaratorList ::= 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("declaratorList",6, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaratorList ::= declaratorList declarator SEMICOLON 
            {
              Object RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)).right;
		Declarator decl = (Declarator)((java_cup.runtime.Symbol) CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)).value;
		
      env . enterVar (decl . id (), decl . type ());
    
              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("declaratorList",6, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // simpleTypeName ::= INT 
            {
              Type RESULT =null;
		 RESULT = new IntegerType (); 
              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("simpleTypeName",5, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // simpleTypeName ::= classId 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TinyJavaParser$stack.peek()).value;
		 RESULT = new ObjectType (id, env . entry (id)); 
              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("simpleTypeName",5, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaration ::= declarator SEMICOLON 
            {
              Object RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)).right;
		Declarator decl = (Declarator)((java_cup.runtime.Symbol) CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)).value;
		
      env . enterVar (decl . id (), decl . type ());
    
              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration ::= classSpecifier SEMICOLON 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // functionDefinition ::= simpleTypeName functionId NT$1 LPAREN argumentDeclarationListOption RPAREN NT$2 LBRACE declaratorList statementListOption RETURN expression SEMICOLON RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-7)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-13)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-13)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-13)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-12)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-12)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-12)).value;
		 
      currentEnv . enterFuncCode (id, ""); /* add code to function entry */
      env = env . parent (); /* restore env */ 
    
              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("functionDefinition",3, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-13)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-5)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-4)).value;

      currentEnv . enterFunc (id, type, env); /* to allow recursive calls */
    
              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("NT$2",42, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$1 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TinyJavaParser$stack.peek()).value;

      currentEnv = env;         	  /* save current env */
      env = new SymbolTable (currentEnv); /* start new scope */
    
              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("NT$1",41, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // externalDefinition ::= declaration 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("externalDefinition",2, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // externalDefinition ::= functionDefinition 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("externalDefinition",2, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // externalDefinitionList ::= externalDefinitionList externalDefinition 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("externalDefinitionList",1, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // externalDefinitionList ::= externalDefinition 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("externalDefinitionList",1, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= INCLUDE IOSTREAM USING NAMESPACE STD SEMICOLON NT$0 externalDefinitionList 
            {
              SymbolTable RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (SymbolTable) ((java_cup.runtime.Symbol) CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)).value;
		 RESULT = env; 
              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-7)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              SymbolTable RESULT =null;
 env = new SymbolTable (null); /* start new scope */ 
              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("NT$0",40, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)).right;
		SymbolTable start_val = (SymbolTable)((java_cup.runtime.Symbol) CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)).value;
		RESULT = start_val;
              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$TinyJavaParser$parser.done_parsing();
          return CUP$TinyJavaParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

